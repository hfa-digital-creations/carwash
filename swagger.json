  {
    "openapi": "3.0.0",
    "info": {
      "title": "Sparkle Wash API Documentation",
      "version": "1.0.0",
      "description": "API documentation for Car Wash, Service, and Order management system",
      "contact": {
        "name": "Naveen",
        "email": "support@sparklewash.com"
      }
    },
    "servers": [
      {
        "url": "https://carwash.hfadigitalcreations.com/"
      }
    ],
    "paths": {
      "/User/registerUser": {
        "post": {
          "tags": [
            "Customer"
          ],
          "summary": "Register a new user",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerRegister"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User registered successfully"
            },
            "400": {
              "description": "Bad request / Missing fields"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/login": {
        "post": {
          "tags": [
            "Customer"
          ],
          "summary": "Login user",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLogin"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful"
            },
            "400": {
              "description": "Invalid credentials"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/forgotPassword": {
        "post": {
          "tags": [
            "Customer"
          ],
          "summary": "Send password reset link to user's email",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerForgotPassword"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset link sent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Password reset link sent to email ✅"
                      },
                      "resetUrl": {
                        "type": "string",
                        "example": "http://localhost:3000/resetPassword/abc123token"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request / Missing email"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/resetPassword/{token}": {
        "put": {
          "tags": [
            "Customer"
          ],
          "summary": "Reset user password using token",
          "parameters": [
            {
              "name": "token",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Password reset token"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResetPassword"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset successful"
            },
            "400": {
              "description": "Invalid or expired token"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/getAllUsers": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Get all users",
          "responses": {
            "200": {
              "description": "List of users fetched successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/getUserById/{id}": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Get user by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "User ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User fetched successfully"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/updateProfile/{id}": {
        "put": {
          "tags": [
            "Customer"
          ],
          "summary": "Update a user by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "User ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "User updated successfully ✅"
                      },
                      "user": {
                        "$ref": "#/components/schemas/CustomerResponse"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/deleteUser/{id}": {
        "delete": {
          "tags": [
            "Customer"
          ],
          "summary": "Delete a user by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "User ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User deleted successfully"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/banner/createCustomerBanner": {
        "post": {
          "tags": [
            "CustomerBanner"
          ],
          "summary": "Create a new banner",
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Banner"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Banner created successfully"
            },
            "500": {
              "description": "Error creating banner"
            }
          }
        }
      },
      "/banner/getallCustomerBanner": {
        "get": {
          "tags": [
            "CustomerBanner"
          ],
          "summary": "Get all banners",
          "responses": {
            "200": {
              "description": "List of all banners"
            },
            "500": {
              "description": "Error fetching banners"
            }
          }
        }
      },
      "/banner/updateCustomerBanner/{id}": {
        "put": {
          "tags": [
            "CustomerBanner"
          ],
          "summary": "Update a banner by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Banner ID"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Banner"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Banner updated successfully"
            },
            "404": {
              "description": "Banner not found"
            },
            "500": {
              "description": "Error updating banner"
            }
          }
        }
      },
      "/banner/deleteCustomerBanner/{id}": {
        "delete": {
          "tags": [
            "CustomerBanner"
          ],
          "summary": "Delete a banner by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Banner ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Banner deleted successfully"
            },
            "404": {
              "description": "Banner not found"
            },
            "500": {
              "description": "Error deleting banner"
            }
          }
        }
      },
      "/service/create": {
        "post": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Create a new wash service type",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashService"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Service created successfully"
            },
            "500": {
              "description": "Error creating service"
            }
          }
        }
      },
      "/service/getall": {
        "get": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Get all wash service types",
          "responses": {
            "200": {
              "description": "List of all services"
            },
            "500": {
              "description": "Error fetching services"
            }
          }
        }
      },
      "/service/{id}": {
        "get": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Get a service type by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Service fetched successfully"
            },
            "404": {
              "description": "Service not found"
            },
            "500": {
              "description": "Error fetching service"
            }
          }
        }
      },
      "/service/update/{id}": {
        "put": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Update a service type by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashService"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Service updated successfully"
            },
            "404": {
              "description": "Service not found"
            },
            "500": {
              "description": "Error updating service"
            }
          }
        }
      },
      "/service/delete/{id}": {
        "delete": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Delete a service type by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Service deleted successfully"
            },
            "404": {
              "description": "Service not found"
            },
            "500": {
              "description": "Error deleting service"
            }
          }
        }
      },

      "/washBooking/createWashBooking": {
        "post": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Create a new wash booking",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashBooking"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Booking created successfully"
            },
            "400": {
              "description": "Missing or invalid fields"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/getAllWashBookings": {
        "get": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Fetch all wash bookings",
          "responses": {
            "200": {
              "description": "All wash bookings fetched successfully"
            },
            "404": {
              "description": "No bookings found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/getWashBookingById/{id}": {
        "get": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Fetch a wash booking by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Booking fetched successfully"
            },
            "404": {
              "description": "Booking not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/getBookingsByCustomerId/{customerId}": {
        "get": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Fetch all bookings for a specific customer",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "68e9eb5372ffcf9a50ca0d03"
            }
          ],
          "responses": {
            "200": {
              "description": "Bookings fetched successfully"
            },
            "400": {
              "description": "Invalid customer ID"
            },
            "404": {
              "description": "No bookings found for this customer"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
 "/washBooking/getBookingDetails/{id}": {
  "get": {
    "tags": ["Wash Booking"],
    "summary": "Fetch detailed booking info including progress updates",
    "description": "Returns full booking details including linked customer, washer details, and current progress status (e.g., On the Way, Started, Washing In Progress, Completed).",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "example": "652a1f3e2b9871dabc123456"
      }
    ],
    "responses": {
      "200": {
        "description": "Booking details fetched successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WashBookingDetails"
            }
          }
        }
      },
      "404": { "description": "Booking not found" },
      "400": { "description": "Invalid booking ID" },
      "500": { "description": "Server error" }
    }
  }
},
      "/washBooking/updateWashBooking/{id}": {
        "put": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Update a wash booking by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashBookingUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking updated successfully"
            },
            "404": {
              "description": "Booking not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/deleteWashBooking/{id}": {
        "delete": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Delete a wash booking by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Booking deleted successfully"
            },
            "404": {
              "description": "Booking not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/cancelWashBooking/{id}": {
        "put": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Cancel a wash booking by ID",
          "description": "Allows a customer or admin to cancel a wash booking and provide a reason for cancellation.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashBookingCancel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking cancelled successfully"
            },
            "400": {
              "description": "Invalid booking ID or already cancelled"
            },
            "404": {
              "description": "Booking not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/addProductCart": {
        "post": {
          "tags": [
            "Cart"
          ],
          "summary": "Add a product to cart",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProductRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Product added to cart",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Product added to cart"
                      },
                      "cart": {
                        "$ref": "#/components/schemas/CartResponse"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "404": {
              "description": "Product or cart not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "AddProductRequest": {
        "type": "object",
        "required": [
          "customerId",
          "productId",
          "quantity"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "description": "ID of the customer"
          },
          "productId": {
            "type": "string",
            "description": "ID of the product"
          },
          "quantity": {
            "type": "integer",
            "default": 1,
            "description": "Quantity of the product"
          }
        }
      },
      "/addToCart/addServiceCart": {
        "post": {
          "tags": [
            "Cart"
          ],
          "summary": "Add service items to cart",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddServiceRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Service added to cart",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/getAllCarts/all": {
        "get": {
          "tags": [
            "Cart"
          ],
          "summary": "Get all carts (admin)",
          "responses": {
            "200": {
              "description": "List of all carts",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartListResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/getCartByCustomerId/{customerId}": {
        "get": {
          "tags": [
            "Cart"
          ],
          "summary": "Get cart for a specific customer",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Customer's cart",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Cart not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/removeItemFromCart": {
        "put": {
          "tags": [
            "Cart"
          ],
          "summary": "Remove an item from cart",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveItemRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Item removed from cart",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "404": {
              "description": "Cart not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/clearCart/{customerId}": {
        "delete": {
          "tags": [
            "Cart"
          ],
          "summary": "Clear all items from a customer's cart",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Cart cleared",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Cart not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },


      "/CustomerShopping/createOrder": {
      "post": {
        "tags": ["CustomerShopping"],
        "summary": "Create a new order (auto-fetches customer details)",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderCreate" } } } },
        "responses": {
          "201": { "description": "Order created successfully (includes customer snapshot)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderResponse" } } } },
          "400": { "description": "Validation error or missing fields" },
          "404": { "description": "Customer not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/CustomerShopping/getAllOrders": {
      "get": {
        "tags": ["CustomerShopping"],
        "summary": "Get all orders (includes customer snapshot)",
        "responses": {
          "200": { "description": "Orders fetched successfully", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/OrderResponse" } } } } },
          "404": { "description": "No orders found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/CustomerShopping/getOrderById/{id}": {
      "get": {
        "tags": ["CustomerShopping"],
        "summary": "Get order by ID (includes customer snapshot)",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "example": "652a1f3e2b9871dabc123456" }],
        "responses": {
          "200": { "description": "Order fetched successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderResponse" } } } },
          "404": { "description": "Order not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/CustomerShopping/getOrderDetails/{id}": {
      "get": {
        "tags": ["CustomerShopping"],
        "summary": "Get detailed order info (includes customer, picker, delivery person, and product details)",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "example": "652a1f3e2b9871dabc123456" }],
        "responses": {
          "200": { "description": "Detailed order fetched successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderDetailsResponse" } } } },
          "404": { "description": "Order not found" },
          "500": { "description": "Server error" }
        }
      }
    },
      "/CustomerShopping/getOrderedItems/{customerId}": {
        "get": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Get all orders for a specific customer (includes customer snapshot)",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "68e9eb5372ffcf9a50ca0d03"
            }
          ],
          "responses": {
            "200": {
              "description": "Customer orders fetched successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/OrderResponse"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No orders found for this customer"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/cancelOrder/{id}": {
        "put": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Cancel an order by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCancel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order cancelled successfully"
            },
            "400": {
              "description": "Invalid order ID or already cancelled"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/deleteOrder/{id}": {
        "delete": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Delete an order by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Order deleted successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },



      "/ServiceBooking/createServiceOrder": {
        "post": {
          "summary": "Create a new service booking order",
          "tags": [
            "ServiceBooking"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBooking"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Service order created successfully"
            },
            "400": {
              "description": "Validation error"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/getAllServiceOrders": {
        "get": {
          "summary": "Get all service orders (Admin)",
          "tags": [
            "ServiceBooking"
          ],
          "responses": {
            "200": {
              "description": "All service orders fetched successfully"
            },
            "404": {
              "description": "No service orders found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/getServiceOrdersByCustomer/{customerId}": {
        "get": {
          "summary": "Get all service orders by customer ID",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d40ef8c1f9a4a5b6c123"
            }
          ],
          "responses": {
            "200": {
              "description": "Orders fetched successfully"
            },
            "404": {
              "description": "No service orders found for this customer"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/getServiceOrderById/{orderId}": {
        "get": {
          "summary": "Get single service order by ID",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "responses": {
            "200": {
              "description": "Service order fetched successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/getServiceBookingDetails/{id}": {
  "get": {
    "summary": "Get service booking details with technician info",
    "tags": ["ServiceBooking"],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "example": "6710d4f1b3a9a0a6a6b8e125"
      }
    ],
    "responses": {
      "200": {
        "description": "Service booking details fetched successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "serviceBooking": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string" },
                    "customerId": { "$ref": "#/components/schemas/Customer" },
                    "serviceItems": { "type": "array" },
                    "address": { "type": "object" },
                    "date": { "type": "string" },
                    "time": { "type": "string" },
                    "payment": { "type": "object" },
                    "serviceStatus": { "type": "string" },
                    "isTechnicianAccepted": { "type": "boolean" },
                    "technicianDetails": {
                      "type": "object",
                      "properties": {
                        "technicianId": { "type": "string" },
                        "fullName": { "type": "string" },
                        "phone": { "type": "string" },
                        "avgRating": { "type": "number" }
                      }
                    },
                    "createdAt": { "type": "string" },
                    "updatedAt": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },
      "404": { "description": "Service booking not found" },
      "500": { "description": "Server error" }
    }
  }
},
      "/ServiceBooking/cancelServiceOrder/{orderId}": {
        "put": {
          "summary": "Cancel a service order by ID",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBookingCancel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Service order cancelled successfully"
            },
            "400": {
              "description": "Order is already cancelled or missing ID"
            },
            "404": {
              "description": "Service order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/updateServiceOrder/{orderId}": {
        "put": {
          "summary": "Update a service order",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBookingUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Service order updated successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/deleteServiceOrder/{orderId}": {
        "delete": {
          "summary": "Delete a service order by ID",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "responses": {
            "200": {
              "description": "Service order deleted successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },

      "/address/createAddress": {
        "post": {
          "tags": [
            "Address"
          ],
          "summary": "Create a new address",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressCreate"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Address created successfully"
            },
            "400": {
              "description": "Missing required fields"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/getAddressByCustomerId/{customerId}": {
        "get": {
          "tags": [
            "Address"
          ],
          "summary": "Get address by customer ID",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Address fetched successfully"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/getAllAddress": {
        "get": {
          "tags": [
            "Address"
          ],
          "summary": "Get all addresses",
          "responses": {
            "200": {
              "description": "Addresses fetched successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/GetAddressById/{id}": {
        "get": {
          "tags": [
            "Address"
          ],
          "summary": "Get address by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Address ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Address fetched successfully"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/updateAddress/{id}": {
        "put": {
          "tags": [
            "Address"
          ],
          "summary": "Update address by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Address ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Address updated successfully"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/deleteAddress/{id}": {
        "delete": {
          "tags": [
            "Address"
          ],
          "summary": "Delete address by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Address ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Address deleted successfully"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/createRating": {
        "post": {
          "tags": [
            "Ratings"
          ],
          "summary": "Create a new rating",
          "description": "Allows a customer to rate a service employee after booking.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRatingRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Rating created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RatingResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/getRatingsByCustomer/{customerId}": {
        "get": {
          "tags": [
            "Ratings"
          ],
          "summary": "Get all ratings by a customer",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID"
            }
          ],
          "responses": {
            "200": {
              "description": "List of ratings by the customer",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "ratings": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RatingResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid customerId"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/getRatingsByEmployee/{employeeId}": {
        "get": {
          "tags": [
            "Ratings"
          ],
          "summary": "Get all ratings for a specific employee",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Employee ID"
            }
          ],
          "responses": {
            "200": {
              "description": "List of ratings for the employee",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "ratings": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RatingResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/getEmployeeSummary/{employeeId}/summary": {
        "get": {
          "tags": [
            "Ratings"
          ],
          "summary": "Get employee rating summary",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Employee ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Employee average rating summary",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EmployeeSummary"
                  }
                }
              }
            },
            "404": {
              "description": "Employee not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/updateRating/{ratingId}": {
        "put": {
          "tags": [
            "Ratings"
          ],
          "summary": "Update a rating",
          "description": "Allows the customer who created a rating to update it.",
          "parameters": [
            {
              "name": "ratingId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rating ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRatingRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Rating updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RatingResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Not allowed"
            },
            "404": {
              "description": "Rating not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/deleteRating/{ratingId}": {
        "delete": {
          "tags": [
            "Ratings"
          ],
          "summary": "Soft delete a rating",
          "description": "Hides a rating instead of permanently deleting it (only owner or admin can perform this).",
          "parameters": [
            {
              "name": "ratingId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rating ID"
            },
            {
              "name": "customerId",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID attempting to delete the rating"
            }
          ],
          "responses": {
            "200": {
              "description": "Rating hidden (soft deleted) successfully"
            },
            "403": {
              "description": "Not allowed"
            },
            "404": {
              "description": "Rating not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/admin/getAllRatings": {
        "get": {
          "tags": [
            "Ratings"
          ],
          "summary": "Get all ratings (including soft-deleted)",
          "description": "Allows admin to see all ratings regardless of isDeleted status",
          "responses": {
            "200": {
              "description": "List of all ratings",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "ratings": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RatingResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/admin/getDeletedRatings": {
        "get": {
          "tags": [
            "Ratings"
          ],
          "summary": "Get only soft-deleted ratings",
          "description": "Allows admin to see ratings that customers have soft-deleted",
          "responses": {
            "200": {
              "description": "List of soft-deleted ratings",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "ratings": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RatingResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },


      "/washerEmp/createWasherEmployee": {
  "post": {
    "summary": "Create a new washer employee with documents",
    "tags": ["WasherEmployee"],
    "requestBody": {
      "required": true,
      "content": {
        "multipart/form-data": {
          "schema": {
            "type": "object",
            "properties": {
              "fullName": { "type": "string", "example": "John Doe" },
              "phone": { "type": "string", "example": "9876543210" },
              "email": { "type": "string", "example": "john@example.com" },
              "password": { "type": "string", "example": "password123" },
              "dateOfBirth": { "type": "string", "format": "date", "example": "1990-05-15" },
              "gender": { "type": "string", "enum": ["Male","Female","Other"], "example": "Male" },
              "referredBy": { "type": "string", "example": "REF1234", "description": "Optional referral code" },
              "serviceCategories": { "type": "array", "items": { "type": "string" }, "example": ["Washing","Repair"] },
              "role": { "type": "string", "enum": ["Washing Personnel","Delivery Person","Repair Service Technician","Product Seller"], "example": "Washing Personnel" },
              "street": { "type": "string", "example": "123 Anna Street" },
              "city": { "type": "string", "example": "Chennai" },
              "state": { "type": "string", "example": "Tamil Nadu" },
              "postalCode": { "type": "string", "example": "600040" },
              "country": { "type": "string", "example": "India" },
              "longitude": { "type": "number", "example": 80.2707 },
              "latitude": { "type": "number", "example": 13.0827 },
              "emergencyName": { "type": "string", "example": "Jane Doe" },
              "emergencyPhone": { "type": "string", "example": "9876543211" },
              "vehicleType": { "type": "string", "example": "Bike" },
              "vehicleModel": { "type": "string", "example": "Honda Activa" },
              "licensePlate": { "type": "string", "example": "TN01AB1234" },
              "registrationCertificate": { "type": "string", "format": "binary", "description": "Upload RC document" },
              "drivingLicense": { "type": "string", "format": "binary", "description": "Upload DL document" },
              "aadhaarCard": { "type": "string", "format": "binary", "description": "Upload Aadhaar card" },
              "accountHolderName": { "type": "string", "example": "John Doe" },
              "accountNumber": { "type": "string", "example": "1234567890" },
              "ifscCode": { "type": "string", "example": "SBIN0001234" },
              "termsAccepted": { "type": "boolean", "example": true }
            },
            "required": ["fullName","phone","email","password","dateOfBirth","gender","role","street","emergencyName","emergencyPhone"]
          }
        }
      }
    },
    "responses": {
      "201": { "description": "Washer employee created successfully" },
      "400": { "description": "Validation error" },
      "500": { "description": "Server error" }
    }
  }
},
      "/washerEmp/getAllWasherEmployees": {
        "get": {
          "summary": "Get all washer employees",
          "tags": [
            "WasherEmployee"
          ],
          "responses": {
            "200": {
              "description": "Fetched all washer employees"
            },
            "404": {
              "description": "No washer employees found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmp/getWasherEmployeeById/{id}": {
        "get": {
          "summary": "Get a washer employee by ID",
          "tags": [
            "WasherEmployee"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "responses": {
            "200": {
              "description": "Washer employee fetched successfully"
            },
            "404": {
              "description": "Washer employee not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmp/updateWasherEmployee/{id}": {
  "put": {
    "summary": "Update a washer employee by ID with documents",
    "tags": ["WasherEmployee"],
    "parameters": [
      { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "multipart/form-data": {
          "schema": {
            "type": "object",
            "properties": {
              "fullName": { "type": "string" },
              "phone": { "type": "string" },
              "email": { "type": "string" },
              "password": { "type": "string" },
              "dateOfBirth": { "type": "string", "format": "date" },
              "gender": { "type": "string" },
              "referredBy": { "type": "string", "description": "Optional referral code" },
              "serviceCategories": { "type": "array", "items": { "type": "string" } },
              "role": { "type": "string" },
              "street": { "type": "string" },
              "city": { "type": "string" },
              "state": { "type": "string" },
              "postalCode": { "type": "string" },
              "country": { "type": "string" },
              "longitude": { "type": "number" },
              "latitude": { "type": "number" },
              "emergencyName": { "type": "string" },
              "emergencyPhone": { "type": "string" },
              "vehicleType": { "type": "string" },
              "vehicleModel": { "type": "string" },
              "licensePlate": { "type": "string" },
              "registrationCertificate": { "type": "string", "format": "binary" },
              "drivingLicense": { "type": "string", "format": "binary" },
              "aadhaarCard": { "type": "string", "format": "binary" },
              "accountHolderName": { "type": "string" },
              "accountNumber": { "type": "string" },
              "ifscCode": { "type": "string" },
              "termsAccepted": { "type": "boolean" }
            }
          }
        }
      }
    },
    "responses": {
      "200": { "description": "Washer employee updated successfully" },
      "404": { "description": "Employee not found" },
      "500": { "description": "Server error" }
    }
  }
}
,
      "/washerEmp/deleteWasherEmployee/{id}": {
        "delete": {
          "summary": "Delete a washer employee by ID",
          "tags": [
            "WasherEmployee"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "responses": {
            "200": {
              "description": "Washer employee deleted successfully"
            },
            "404": {
              "description": "Washer employee not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },

      "/washerEmpShedule/washerAcceptBooking": {
        "post": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Accept a wash booking",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeclineBooking"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking accepted successfully"
            },
            "400": {
              "description": "Invalid ID"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/washerDeclineBooking": {
        "post": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Decline a wash booking",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeclineBooking"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking declined successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/updateBookingStatus/{scheduleId}": {
        "put": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Update booking status",
          "parameters": [
            {
              "name": "scheduleId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "On the Way",
                        "Started",
                        "Completed",
                        "Declined"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Status updated successfully"
            },
            "400": {
              "description": "Invalid scheduleId"
            },
            "404": {
              "description": "Schedule not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/getAllWasherSchedules": {
        "get": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Get all schedules or schedules for a specific washer",
          "parameters": [
            {
              "name": "washerId",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              },
              "description": "Optional washer ID to filter schedules"
            }
          ],
          "responses": {
            "200": {
              "description": "Schedules fetched successfully"
            },
            "404": {
              "description": "No schedules found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/deleteSchedule/{scheduleId}": {
        "delete": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Delete a schedule",
          "parameters": [
            {
              "name": "scheduleId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Schedule deleted successfully"
            },
            "404": {
              "description": "Schedule not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/acceptOrder": {
        "post": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Accept a delivery order",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeclineOrder"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order accepted successfully"
            },
            "400": {
              "description": "Invalid ID or employee not a Delivery Person"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/declineOrder": {
        "post": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Decline a delivery order",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeclineOrder"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order declined successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/updateOrderStatus/{scheduleId}": {
        "put": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Update order status",
          "parameters": [
            {
              "name": "scheduleId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "On the Way",
                        "Picked Up",
                        "Completed",
                        "Cancelled"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Status updated successfully"
            },
            "400": {
              "description": "Invalid scheduleId"
            },
            "404": {
              "description": "Schedule not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/getAllSchedules": {
        "get": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Get all schedules or schedules for a specific delivery person",
          "parameters": [
            {
              "name": "deliveryPersonId",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              },
              "description": "Optional delivery person ID to filter schedules"
            }
          ],
          "responses": {
            "200": {
              "description": "Schedules fetched successfully"
            },
            "404": {
              "description": "No schedules found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/deleteSchedule/{scheduleId}": {
        "delete": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Delete a delivery schedule",
          "parameters": [
            {
              "name": "scheduleId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Schedule deleted successfully"
            },
            "404": {
              "description": "Schedule not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },


       "/repairTechnician/createRepairTechnician": {
    "post": {
      "tags": ["RepairTechnician"],
      "summary": "Create a new Repair Technician",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RepairTechnician" }
          }
        }
      },
      "responses": {
        "201": { "description": "Repair Technician created successfully" },
        "400": { "description": "Error creating Repair Technician" }
      }
    }
  },
  "/repairTechnician/getAllRepairTechnicians": {
    "get": {
      "tags": ["RepairTechnician"],
      "summary": "Get all Repair Technicians",
      "responses": {
        "200": {
          "description": "List of all Repair Technicians",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/RepairTechnician" }
              }
            }
          }
        },
        "500": { "description": "Error fetching technicians" }
      }
    }
  },
  "/repairTechnician/getRepairTechnicianById/{id}": {
    "get": {
      "tags": ["RepairTechnician"],
      "summary": "Get Repair Technician by ID",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": { "type": "string" },
          "description": "MongoDB ObjectId of the technician"
        }
      ],
      "responses": {
        "200": { "description": "Repair Technician fetched successfully" },
        "400": { "description": "Invalid ID" },
        "404": { "description": "Repair Technician not found" },
        "500": { "description": "Error fetching technician" }
      }
    }
  },
  "/repairTechnician/updateRepairTechnician/{id}": {
    "put": {
      "tags": ["RepairTechnician"],
      "summary": "Update Repair Technician",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": { "type": "string" },
          "description": "MongoDB ObjectId of the technician"
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RepairTechnician" }
          }
        }
      },
      "responses": {
        "200": { "description": "Repair Technician updated successfully" },
        "400": { "description": "Error updating technician" },
        "404": { "description": "Repair Technician not found" }
      }
    }
  },
  "/repairTechnician/deleteRepairTechnician/{id}": {
    "delete": {
      "tags": ["RepairTechnician"],
      "summary": "Delete Repair Technician",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": { "type": "string" },
          "description": "MongoDB ObjectId of the technician"
        }
      ],
      "responses": {
        "200": { "description": "Repair Technician deleted successfully" },
        "400": { "description": "Invalid ID" },
        "404": { "description": "Repair Technician not found" },
        "500": { "description": "Error deleting technician" }
      }
    }
  },

  "/repairService/createService": {
      "post": {
        "tags": ["RepairService"],
        "summary": "Create a new repair service",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/repairService/getAllServices": {
      "get": {
        "tags": ["RepairService"],
        "summary": "Get all repair services",
        "responses": {
          "200": {
            "description": "List of all services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllServicesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/repairService/serviceById/{serviceId}": {
      "get": {
        "tags": ["RepairService"],
        "summary": "Get service details by ID",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the service to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Service details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Service not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/repairService/getAlltechnician/{repairTechnicianId}": {
      "get": {
        "tags": ["RepairService"],
        "summary": "Get all services created by a specific repair technician",
        "parameters": [
          {
            "name": "repairTechnicianId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the repair technician"
          }
        ],
        "responses": {
          "200": {
            "description": "List of services by technician",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid technician ID"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/repairService/updateService/{serviceId}": {
      "put": {
        "tags": ["RepairService"],
        "summary": "Update an existing repair service",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the service to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service updated successfully"
          },
          "404": {
            "description": "Service not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/repairService/deleteService/{serviceId}": {
      "delete": {
        "tags": ["RepairService"],
        "summary": "Delete a repair service by ID",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the service to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Service deleted successfully"
          },
          "404": {
            "description": "Service not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },



       "/repairTechnicanSchedule/acceptService": {
    "post": {
      "tags": ["Repair Technician Schedule"],
      "summary": "Accept a customer service request",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AcceptServiceRequest"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Service accepted successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptServiceResponse"
              }
            }
          }
        },
        "400": {
          "description": "Invalid ID or bad request"
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  },
  "/repairTechnicanSchedule/declineService": {
    "post": {
      "tags": ["Repair Technician Schedule"],
      "summary": "Decline a customer service request",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeclineServiceRequest"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Service declined successfully"
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  },
  "/repairTechnicanSchedule/updateService/{scheduleId}": {
    "put": {
      "tags": ["Repair Technician Schedule"],
      "summary": "Update service status (On the Way / Service Started / Completed / Cancelled)",
      "parameters": [
        {
          "in": "path",
          "name": "scheduleId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Schedule ID to update"
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateServiceStatus"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Status updated successfully"
        },
        "404": {
          "description": "Schedule not found"
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  },
  "/repairTechnicanSchedule/getAllSchedules": {
    "get": {
      "tags": ["Repair Technician Schedule"],
      "summary": "Fetch all or technician-specific schedules",
      "parameters": [
        {
          "in": "query",
          "name": "repairTechnicianId",
          "schema": {
            "type": "string"
          },
          "description": "Filter by technician ID"
        }
      ],
      "responses": {
        "200": {
          "description": "Schedules fetched successfully"
        },
        "404": {
          "description": "No schedules found"
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  },
  "/repairTechnicanSchedule/deleteSchedule/{scheduleId}": {
    "delete": {
      "tags": ["Repair Technician Schedule"],
      "summary": "Delete a technician schedule",
      "parameters": [
        {
          "in": "path",
          "name": "scheduleId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Schedule ID to delete"
        }
      ],
      "responses": {
        "200": {
          "description": "Schedule deleted successfully"
        },
        "404": {
          "description": "Schedule not found"
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  },


      "/productSeller/createProductSeller": {
        "post": {
          "tags": [
            "ProductSeller"
          ],
          "summary": "Create a new Product Seller",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSellerInput"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Product Seller created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductSellerResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Error creating Product Seller"
            }
          }
        }
      },
      "/productSeller/getAllProductSellers": {
        "get": {
          "tags": [
            "ProductSeller"
          ],
          "summary": "Get all Product Sellers",
          "responses": {
            "200": {
              "description": "All Product Sellers fetched successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ProductSeller"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/productSeller/getProductSellerById/{id}": {
        "get": {
          "tags": [
            "ProductSeller"
          ],
          "summary": "Get Product Seller by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Product Seller fetched successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductSellerResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Product Seller not found"
            }
          }
        }
      },
      "/productSeller/updateProductSeller/{id}": {
        "put": {
          "tags": [
            "ProductSeller"
          ],
          "summary": "Update Product Seller",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSellerInput"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Product Seller updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductSellerResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Product Seller not found"
            }
          }
        }
      },
      "/productSeller/deleteProductSeller/{id}": {
        "delete": {
          "tags": [
            "ProductSeller"
          ],
          "summary": "Delete Product Seller",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Product Seller deleted successfully"
            },
            "404": {
              "description": "Product Seller not found"
            }
          }
        }
      },

      "/product/createProduct": {
        "post": {
          "tags": [
            "Product"
          ],
          "summary": "Create a new product",
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sellerId": {
                      "type": "string",
                      "example": "64f123abc456def78901234"
                    },
                    "productTitle": {
                      "type": "string",
                      "example": "Car Shampoo"
                    },
                    "productDescription": {
                      "type": "string",
                      "example": "High-quality car shampoo"
                    },
                    "unitPrice": {
                      "type": "number",
                      "example": 299
                    },
                    "stockQuantity": {
                      "type": "number",
                      "example": 50
                    },
                    "productImage": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "required": [
                    "sellerId",
                    "productTitle",
                    "productDescription",
                    "unitPrice",
                    "stockQuantity",
                    "productImage"
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Product created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductResponse"
                  }
                }
              }
            },
            "400": {
              "description": "All fields are required"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/product/getAllProducts": {
        "get": {
          "tags": [
            "Product"
          ],
          "summary": "Get all products",
          "responses": {
            "200": {
              "description": "All products fetched successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductsListResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/product/getProductById/{productId}": {
        "get": {
          "tags": [
            "Product"
          ],
          "summary": "Get product by ID",
          "parameters": [
            {
              "name": "productId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Product fetched successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/product/getAllProductsBySellerId/{sellerId}": {
        "get": {
          "tags": [
            "Product"
          ],
          "summary": "Get all products by seller ID",
          "parameters": [
            {
              "name": "sellerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Products for the seller fetched successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductsListResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid Seller ID"
            },
            "404": {
              "description": "Seller not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/product/updateProduct/{productId}": {
        "put": {
          "tags": [
            "Product"
          ],
          "summary": "Update product by ID",
          "parameters": [
            {
              "name": "productId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "productTitle": {
                      "type": "string"
                    },
                    "productDescription": {
                      "type": "string"
                    },
                    "unitPrice": {
                      "type": "number"
                    },
                    "stockQuantity": {
                      "type": "number"
                    },
                    "productImage": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Product updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/product/deleteProduct/{productId}": {
        "delete": {
          "tags": [
            "Product"
          ],
          "summary": "Delete product by ID",
          "parameters": [
            {
              "name": "productId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Product deleted successfully"
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },

      "/seller-orders/accept": {
        "post": {
          "tags": [
            "SellerOrderTrack"
          ],
          "summary": "Accept a customer order",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptOrderRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Seller order accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SellerOrderTrackResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/seller-orders/status/{trackId}": {
        "put": {
          "tags": [
            "SellerOrderTrack"
          ],
          "summary": "Update seller order status",
          "parameters": [
            {
              "name": "trackId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "ID of the seller order track"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrderStatusRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order status updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SellerOrderTrackResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid ID"
            },
            "404": {
              "description": "Track not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/seller-orders": {
        "get": {
          "tags": [
            "SellerOrderTrack"
          ],
          "summary": "Get all seller orders or filter by sellerId",
          "parameters": [
            {
              "name": "sellerId",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Filter orders by seller ID"
            }
          ],
          "responses": {
            "200": {
              "description": "List of seller orders",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      },
                      "orders": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/SellerOrderTrackResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No orders found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/seller-orders/{trackId}": {
        "delete": {
          "tags": [
            "SellerOrderTrack"
          ],
          "summary": "Delete a seller order track",
          "parameters": [
            {
              "name": "trackId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Track deleted successfully"
            },
            "400": {
              "description": "Invalid track ID"
            },
            "404": {
              "description": "Track not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },

      "/contactQuery/createQuery": {
        "post": {
          "tags": [
            "ContactQuery"
          ],
          "summary": "Create a new contact query",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactQueryCreate"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Query submitted successfully"
            },
            "400": {
              "description": "Validation error"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/contactQuery/getAllQueries": {
        "get": {
          "tags": [
            "ContactQuery"
          ],
          "summary": "Get all contact queries",
          "responses": {
            "200": {
              "description": "All queries fetched successfully"
            },
            "404": {
              "description": "No queries found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/contactQuery/getQueryById/{id}": {
        "get": {
          "tags": [
            "ContactQuery"
          ],
          "summary": "Get a contact query by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Query fetched successfully"
            },
            "404": {
              "description": "Query not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/adminRegistration/register": {
        "post": {
          "tags": [
            "Admin"
          ],
          "summary": "Register a new admin",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRegister"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Admin registered successfully"
            },
            "400": {
              "description": "Validation error or admin already exists"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/adminRegistration/login": {
        "post": {
          "tags": [
            "Admin"
          ],
          "summary": "Admin login",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLogin"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Admin logged in successfully"
            },
            "400": {
              "description": "Invalid credentials"
            },
            "404": {
              "description": "Admin not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/adminRegistration/getAllAdmins": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get all admins",
          "responses": {
            "200": {
              "description": "Admins fetched successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/adminRegistration/getAdminById/{id}": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get admin by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Admin fetched successfully"
            },
            "404": {
              "description": "Admin not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/adminRegistration/updateAdmin/{id}": {
  "put": {
    "tags": ["Admin"],
    "summary": "Update admin by ID",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "example": "652a1f3e2b9871dabc123456"
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": { "$ref": "#/components/schemas/AdminUpdate" }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Admin updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Admin updated successfully ✅" },
                "admin": { "$ref": "#/components/schemas/AdminDetails" }
              }
            }
          }
        }
      },
      "404": { "description": "Admin not found" },
      "500": { "description": "Server error" }
    }
  }
      },
      "/adminRegistration/deleteAdmin/{id}": {
        "delete": {
          "tags": [
            "Admin"
          ],
          "summary": "Delete admin by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Admin deleted successfully"
            },
            "404": {
              "description": "Admin not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },

 "/adminUser/{userId}/active": {
      "put": {
        "tags": ["AdminUser"],
        "summary": "Activate or deactivate a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Activation status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isActive": { "type": "boolean", "example": true }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User activation status updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User has been activated successfully ✅" },
                    "user": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          },
          "404": { "description": "User not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/adminUser/technician/{technicianId}/active": {
      "put": {
        "tags": ["AdminUser"],
        "summary": "Activate or deactivate a technician",
        "parameters": [
          {
            "name": "technicianId",
            "in": "path",
            "description": "ID of the technician",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Activation status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isActive": { "type": "boolean", "example": true }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Technician activation status updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Technician has been activated successfully ✅" },
                    "technician": { "$ref": "#/components/schemas/Technician" }
                  }
                }
              }
            }
          },
          "404": { "description": "Technician not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/adminUser/seller/{sellerId}/active": {
  "put": {
    "tags": ["AdminUser"],
    "summary": "Activate or deactivate a product seller",
    "parameters": [
      {
        "name": "sellerId",
        "in": "path",
        "description": "ID of the product seller",
        "required": true,
        "schema": { "type": "string" }
      }
    ],
    "requestBody": {
      "description": "Activation status",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "isActive": { "type": "boolean", "example": true }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Product Seller activation status updated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Product Seller has been activated successfully ✅" },
                "seller": { "$ref": "#/components/schemas/ProductSellers" }
              }
            }
          }
        }
      },
      "404": { "description": "Product Seller not found" },
      "500": { "description": "Server error" }
    }
  }
},
"/adminUser/employee/{employeeId}/active": {
  "put": {
    "tags": ["AdminUser"],
    "summary": "Activate or deactivate a Washer or Delivery personnel",
    "parameters": [
      {
        "name": "employeeId",
        "in": "path",
        "description": "ID of the employee",
        "required": true,
        "schema": { "type": "string" }
      }
    ],
    "requestBody": {
      "description": "Activation status",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "isActive": { "type": "boolean", "example": true }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Employee activation status updated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Washing Personnel has been activated successfully ✅" },
                "employee": { "$ref": "#/components/schemas/Employee" }
              }
            }
          }
        }
      },
      "404": { "description": "Employee not found" },
      "500": { "description": "Server error" }
    }
  }
},



       "/admin/assignOrder/createAssignOrder": {
      "post": {
        "tags": ["AssignOrder"],
        "summary": "Create / Assign Order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AssignOrderRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order assigned successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AssignOrderResponse" } }
            }
          },
          "400": { "description": "Invalid input or missing fields" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/admin/assignOrder/updateAssignOrder/{id}": {
      "put": {
        "tags": ["AssignOrder"],
        "summary": "Update Assigned Order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "AssignOrder ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AssignOrderUpdateRequest" } } }
        },
        "responses": {
          "200": { "description": "Order updated successfully" },
          "400": { "description": "Invalid ID" },
          "404": { "description": "Order not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/admin/assignOrder/deleteAssignOrder/{id}": {
      "delete": {
        "tags": ["AssignOrder"],
        "summary": "Delete Assigned Order",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Order deleted successfully" },
          "400": { "description": "Invalid ID" },
          "404": { "description": "Order not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/admin/assignOrder/getAllAssignOrders/getAll": {
      "get": {
        "tags": ["AssignOrder"],
        "summary": "Get all Assigned Orders",
        "responses": {
          "200": {
            "description": "All assigned orders",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AssignOrderListResponse" } } }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/admin/assignOrder/getAssignOrderById/{id}": {
      "get": {
        "tags": ["AssignOrder"],
        "summary": "Get Assigned Order by ID",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Order found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AssignOrderResponse" } } } },
          "400": { "description": "Invalid ID" },
          "404": { "description": "Order not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/admin/assignOrder/declineAssignOrder/{id}": {
      "put": {
        "tags": ["AssignOrder"],
        "summary": "Decline / Cancel Assigned Order",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Order cancelled successfully" },
          "400": { "description": "Invalid ID" },
          "404": { "description": "Order not found" },
          "500": { "description": "Server error" }
        }
      }
    },



"/adminbranch/createBranch": {
      "post": {
        "tags": ["Branch"],
        "summary": "Create a new branch with sub-admin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateBranchRequest" } }
          }
        },
        "responses": {
          "201": {
            "description": "Branch created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BranchResponse" } } }
          },
          "400": { "description": "Bad request (missing fullName/phoneNumber/email/password)" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/adminbranch/updateBranch/{id}": {
      "put": {
        "tags": ["Branch"],
        "summary": "Update branch or sub-admin details",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateBranchRequest" } }
          }
        },
        "responses": {
          "200": { "description": "Branch updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BranchResponse" } } } },
          "400": { "description": "Invalid Branch ID or missing subAdmin fields" },
          "404": { "description": "Branch not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/adminbranch/deleteBranch/{id}": {
      "delete": {
        "tags": ["Branch"],
        "summary": "Delete a branch",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Branch deleted successfully" },
          "400": { "description": "Invalid Branch ID" },
          "404": { "description": "Branch not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/adminbranch/getAllBranches": {
      "get": {
        "tags": ["Branch"],
        "summary": "Get all branches",
        "responses": {
          "200": { "description": "List of all branches", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BranchesListResponse" } } } },
          "500": { "description": "Server error" }
        }
      }
    },
    "/adminbranch/getBranchById/{id}": {
      "get": {
        "tags": ["Branch"],
        "summary": "Get branch by ID",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Branch details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BranchResponse" } } } },
          "400": { "description": "Invalid Branch ID" },
          "404": { "description": "Branch not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/adminbranch/toggleBranchStatus/{id}": {
      "put": {
        "tags": ["Branch"],
        "summary": "Activate or deactivate branch/sub-admin",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "isActive": { "type": "boolean", "example": true } }, "required": ["isActive"] }
            }
          }
        },
        "responses": {
          "200": { "description": "Branch status updated successfully" },
          "400": { "description": "Invalid Branch ID" },
          "404": { "description": "Branch not found" },
          "500": { "description": "Server error" }
        }
      }
    },


     "/AdminReferral/getAllReferrals": {
    "get": {
      "tags": ["AdminReferral"],
      "summary": "Get all referral records (Admin Table)",
      "description": "Fetch all referral records with details like referrer name, type, referral code, status, etc.",
      "responses": {
        "200": {
          "description": "All referrals fetched successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralListResponse"
              }
            }
          }
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  },
"/AdminReferral/getReferralDetailsByUserId/{id}": {
  "get": {
    "tags": ["AdminReferral"],
    "summary": "Get referral details by User ID",
    "description": "Fetch detailed referral information using any user's ID (works for Customer, WasherEmployee, RepairTechnician, ProductSeller, DeliveryPerson).",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "description": "User ID (either referrer or referred)",
        "example": "68fc9c9dfdcbd9a16baca397"
      }
    ],
    "responses": {
      "200": {
        "description": "Referral details fetched successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferralDetailsByUserResponse"
            }
          }
        }
      },
      "404": {
        "description": "No referral found for this user ID"
      },
      "500": {
        "description": "Server error"
      }
    }
  }
},

  "/AdminReferral/getReferralById/{id}": {
    "get": {
      "tags": ["AdminReferral"],
      "summary": "Get referral details by ID (Admin View)",
      "description": "Fetch detailed information about a specific referral record, including referrer and referred person details.",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": { "type": "string" },
          "description": "Referral ID to fetch details for"
        }
      ],
      "responses": {
        "200": {
          "description": "Referral details fetched successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralDetailResponse"
              }
            }
          }
        },
        "404": {
          "description": "Referral not found"
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  },

  "/AdminReferral/updateReferralStatus/{id}/status": {
    "put": {
      "tags": ["AdminReferral"],
      "summary": "Approve or Reject a referral",
      "description": "Admin updates the status of a referral to either 'Approved' or 'Rejected'.",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": { "type": "string" },
          "description": "Referral ID to update"
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": ["Approved", "Rejected"],
                  "example": "Approved"
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Referral status updated successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralStatusResponse"
              }
            }
          }
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  }
    },
    "components": {
      "schemas": {
        "CustomerRegister": {
          "type": "object",
          "properties": {
            "fullName": {
              "type": "string",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "example": "john@example.com"
            },
            "phoneNumber": {
              "type": "string",
              "example": "9876543210"
            },
            "password": {
              "type": "string",
              "example": "123456"
            },
            "confirmPassword": {
              "type": "string",
              "example": "123456"
            }
          },
          "required": [
            "fullName",
            "email",
            "phoneNumber",
            "password",
            "confirmPassword"
          ]
        },
        "CustomerLogin": {
          "type": "object",
          "properties": {
            "emailOrPhone": {
              "type": "string",
              "example": "john@example.com"
            },
            "password": {
              "type": "string",
              "example": "123456"
            }
          },
          "required": [
            "emailOrPhone",
            "password"
          ]
        },
        "CustomerForgotPassword": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "john@example.com"
            }
          },
          "required": [
            "email"
          ]
        },
        "CustomerResetPassword": {
          "type": "object",
          "properties": {
            "password": {
              "type": "string",
              "example": "newpassword123"
            },
            "confirmPassword": {
              "type": "string",
              "example": "newpassword123"
            }
          },
          "required": [
            "password",
            "confirmPassword"
          ]
        },
        "CustomerUpdate": {
          "type": "object",
          "properties": {
            "fullName": {
              "type": "string",
              "example": "John Doe Updated"
            },
            "email": {
              "type": "string",
              "example": "johnnew@example.com"
            },
            "phoneNumber": {
              "type": "string",
              "example": "9876543210"
            },
            "street": {
              "type": "string",
              "example": "123 Main Street"
            },
            "city": {
              "type": "string",
              "example": "New York"
            },
            "pincode": {
              "type": "string",
              "example": "10001"
            },
            "maxCars": {
              "type": "number",
              "example": 2
            },
            "location": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "Point"
                  ],
                  "example": "Point"
                },
                "coordinates": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    -73.935242,
                    40.73061
                  ]
                }
              }
            }
          }
        },
        "Banner": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "example": "Car Wash"
            },
            "description": {
              "type": "string",
              "example": "Premium car washing service at your doorstep."
            },
            "priceTag": {
              "type": "number",
              "example": 10
            },
            "image": {
              "type": "string",
              "format": "binary",
              "description": "Upload banner image file"
            }
          },
          "required": [
            "title",
            "description",
            "priceTag",
            "image"
          ]
        },
        "WashService": {
          "type": "object",
          "properties": {
            "packageName": {
              "type": "string",
              "example": "Basic Wash"
            },
            "price": {
              "type": "number",
              "example": 15
            },
            "description": {
              "type": "string",
              "example": "Basic car wash including exterior cleaning"
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "Exterior cleaning",
                "Tire wash",
                "Window cleaning"
              ]
            }
          },
          "required": [
            "packageName",
            "price",
            "description"
          ]
        },

        "WashBooking": {
  "type": "object",
  "properties": {
    "customerId": {
      "type": "string",
      "example": "68e9eb5372ffcf9a50ca0d03"
    },
    "vehicleType": {
      "type": "string",
      "enum": ["Car", "Bike"],
      "example": "Car"
    },
    "vehicleNumber": {
      "type": "string",
      "example": "TN01AB1234"
    },
    "washPackageId": {
      "type": "string",
      "example": "68ef5e987a123b456c89d012",
      "description": "ID of the selected wash package"
    },
    "serviceType": {
      "type": "string",
      "enum": ["Normal", "Express"],
      "example": "Express"
    },
    "address": {
      "type": "object",
      "properties": {
        "street": { "type": "string", "example": "12 Gandhi Street" },
        "city": { "type": "string", "example": "Chennai" },
        "pincode": { "type": "string", "example": "600001" }
      },
      "required": ["street", "city", "pincode"]
    },
    "bookingDate": {
      "type": "string",
      "format": "date",
      "example": "2025-06-10",
      "description": "Required only if serviceType is 'Normal'"
    },
    "bookingTime": {
      "type": "string",
      "example": "09:00 AM",
      "description": "Required only if serviceType is 'Normal'"
    },
    "expressCharge": { "type": "number", "example": 10 },
    "advanceBookingCharge": { "type": "number", "example": 10 },
    "discountAmount": { "type": "number", "example": 5 },
    "couponCode": { "type": "string", "example": "SAVE5" },
    "paymentMethod": {
      "type": "string",
      "enum": ["Cash", "UPI", "Card"],
      "example": "UPI"
    },
    "paymentStatus": {
      "type": "string",
      "enum": ["Pending", "Completed", "Paid"],
      "example": "Paid"
    }
  },
  "required": [
    "customerId",
    "vehicleType",
    "vehicleNumber",
    "washPackageId",
    "serviceType",
    "address",
    "paymentMethod"
  ]
}
,
  "WashBookingDetails": {
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "example": "Booking details fetched successfully ✅"
    },
    "booking": {
      "type": "object",
      "properties": {
        "_id": { "type": "string", "example": "68e9eb5372ffcf9a50ca0d03" },
        "orderId":{"type":"string", "example":"#ORD10001"},
        "customerId": {
          "type": "object",
          "properties": {
            "_id": { "type": "string", "example": "68e9eb5372ffcf9a50ca0d03" },
            "fullName": { "type": "string", "example": "Naveen Kumar" },
            "email": { "type": "string", "example": "naveen@example.com" },
            "phoneNumber": { "type": "string", "example": "9876543210" }
          }
        },
        "washerDetails": {
          "type": "object",
          "properties": {
            "washerId": { "type": "string", "example": "609ebc972abf9d0020e8b123" },
            "fullName": { "type": "string", "example": "Arun Washer" },
            "phone": { "type": "string", "example": "9876512345" },
            "avgRating": { "type": "number", "example": 4.5 }
          }
        },
        "vehicleType": { "type": "string", "example": "Car" },
        "vehicleNumber": { "type": "string", "example": "TN01AB1234" },
        "washPackage": {
          "type": "object",
          "properties": {
            "packageName": { "type": "string", "example": "Premium Wash" },
            "price": { "type": "number", "example": 60 },
            "description": { "type": "string", "example": "Exterior + Interior + Polish" },
            "features": {
              "type": "array",
              "items": { "type": "string" },
              "example": ["Exterior Wash", "Vacuum Clean", "Wax Polish"]
            }
          }
        },
        "serviceType": { "type": "string", "example": "Normal" },
        "address": {
          "type": "object",
          "properties": {
            "street": { "type": "string", "example": "12 Gandhi Street" },
            "city": { "type": "string", "example": "Chennai" },
            "pincode": { "type": "string", "example": "600001" }
          }
        },
        "status": { "type": "string", "example": "Washing In Progress" },
        "totalAmount": { "type": "number", "example": 80 },
        "paymentMethod": { "type": "string", "example": "UPI" },
        "paymentStatus": { "type": "string", "example": "Paid" },
        "createdAt": { "type": "string", "example": "2025-10-26T09:00:00Z" },
        "updatedAt": { "type": "string", "example": "2025-10-26T10:00:00Z" }
      }
    },
    "progress": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "On the Way"
      },
      "example": ["On the Way", "Started", "Washing In Progress"]
    }
  }
},
        "WashBookingUpdate": {
          "type": "object",
          "properties": {
            "washPackage": {
              "type": "string",
              "example": "Deluxe"
            },
            "serviceType": {
              "type": "string",
              "example": "Express"
            },
            "expressCharge": {
              "type": "number",
              "example": 10
            },
            "advanceBookingCharge": {
              "type": "number",
              "example": 10
            },
            "couponCode": {
              "type": "string",
              "example": "WELCOME50"
            },
            "discountAmount": {
              "type": "number",
              "example": 5
            },
            "totalAmount": {
              "type": "number",
              "example": 45
            },
            "paymentStatus": {
              "type": "string",
              "example": "Completed"
            }
          }
        },
        "WashBookingCancel": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "example": "Customer changed the schedule"
            }
          },
          "required": []
        },

        "AddProductRequest": {
          "type": "object",
          "required": [
            "customerId",
            "productId",
            "quantity"
          ],
          "properties": {
            "customerId": {
              "type": "string"
            },
            "productId": {
              "type": "string"
            },
            "quantity": {
              "type": "integer",
              "default": 1
            }
          }
        },
        "AddServiceRequest": {
          "type": "object",
          "required": [
            "customerId",
            "serviceItems"
          ],
          "properties": {
            "customerId": {
              "type": "string"
            },
            "serviceItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "serviceId": {
                    "type": "string"
                  },
                  "productImage": {
                    "type": "string"
                  },
                  "productName": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "serviceCharges": {
                    "type": "number"
                  },
                  "serviceStore": {
                    "type": "object",
                    "properties": {
                      "storeName": {
                        "type": "string"
                      },
                      "storeAddress": {
                        "type": "string"
                      },
                      "contactNumber": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "RemoveItemRequest": {
          "type": "object",
          "required": [
            "customerId",
            "itemId",
            "type"
          ],
          "properties": {
            "customerId": {
              "type": "string"
            },
            "itemId": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "product",
                "service"
              ]
            }
          }
        },
        "CartItem": {
          "type": "object",
          "properties": {
            "product": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "productTitle": {
                  "type": "string"
                },
                "productDescription": {
                  "type": "string"
                },
                "unitPrice": {
                  "type": "number"
                },
                "stockQuantity": {
                  "type": "number"
                },
                "productImage": {
                  "type": "string"
                },
                "sellerId": {
                  "type": "string"
                }
              }
            },
            "quantity": {
              "type": "integer"
            },
            "total": {
              "type": "number"
            },
            "serviceItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "serviceId": {
                    "type": "string"
                  },
                  "productImage": {
                    "type": "string"
                  },
                  "productName": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "serviceCharges": {
                    "type": "number"
                  },
                  "serviceStore": {
                    "type": "object",
                    "properties": {
                      "storeName": {
                        "type": "string"
                      },
                      "storeAddress": {
                        "type": "string"
                      },
                      "contactNumber": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "CartResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "customerId": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "subtotal": {
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "CartListResponse": {
          "type": "object",
          "properties": {
            "carts": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CartResponse"
              }
            }
          }
        },


        "OrderCreate": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "68e9eb5372ffcf9a50ca0d03",
            "description": "Only the customer ID is required. Other details will be auto-fetched from database."
          },
          "cartItems": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CartItem" }
          },
          "address": { "$ref": "#/components/schemas/Address" },
          "payment": { "$ref": "#/components/schemas/Payment" }
        },
        "required": ["customerId", "cartItems", "address", "payment"]
      },
      "CustomerDetails": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Naveen Kumar" },
          "email": { "type": "string", "example": "naveen@gmail.com" },
          "phone": { "type": "string", "example": "9876543210" }
        }
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "productId": { "type": "string", "example": "652a1f3e2b9871dabc123456" },
          "productTitle": { "type": "string", "example": "Bike Shampoo" },
          "productDescription": { "type": "string", "example": "High-quality car shampoo" },
          "unitPrice": { "type": "number", "example": 299 },
          "stockQuantity": { "type": "integer", "example": 50 },
          "productImage": { "type": "string", "example": "uploads\\productImages\\1760616690208-954649250.png" },
          "quantity": { "type": "integer", "example": 2 },
          "total": { "type": "number", "example": 598 }
        },
        "required": ["productId", "productTitle", "unitPrice", "quantity", "total"]
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "example": "12 Gandhi Street" },
          "city": { "type": "string", "example": "Chennai" },
          "pincode": { "type": "string", "example": "600001" },
          "maxCars": { "type": "integer", "example": 1 },
          "location": {
            "type": "object",
            "properties": {
              "type": { "type": "string", "example": "Point" },
              "coordinates": { "type": "array", "items": { "type": "number" }, "example": [80.2707, 13.0827] }
            }
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["COD", "CreditCard", "DebitCard", "UPI", "NetBanking"],
            "example": "UPI"
          },
          "transactionId": { "type": "string", "example": "TXN123456" },
          "amount": { "type": "number", "example": 1000 },
          "status": { "type": "string", "enum": ["Pending", "Completed", "Failed"], "example": "Pending" }
        }
      },
      "DeliveryPersonDetails": {
        "type": "object",
        "properties": {
          "deliveryPersonId": { "type": "string", "example": "64fa1b2c3d4e5f6789012345" },
          "fullName": { "type": "string", "example": "John Doe" },
          "phone": { "type": "string", "example": "9876501234" },
          "avgRating": { "type": "number", "example": 4.8 },
          "vehicleType": { "type": "string", "example": "Bike" }
        }
      },
      "OrderResponse": {
        "type": "object",
        "properties": {
          "customerId": { "type": "string", "example": "68e9eb5372ffcf9a50ca0d03" },
          "customerDetails": { "$ref": "#/components/schemas/CustomerDetails" },
          "cartItems": { "type": "array", "items": { "$ref": "#/components/schemas/CartItem" } },
          "address": { "$ref": "#/components/schemas/Address" },
          "payment": { "$ref": "#/components/schemas/Payment" },
          "subtotal": { "type": "number", "example": 598 },
          "orderStatus": { "type": "string", "enum": ["Pending", "Confirmed", "Delivered", "Cancelled", "On the Way"], "example": "On the Way" },
          "isDeliveryAccepted": { "type": "boolean", "example": true },
          "deliveryPersonDetails": { "$ref": "#/components/schemas/DeliveryPersonDetails" },
          
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "OrderDetailsResponse": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string", "example": "652a1f3e2b9871dabc123456" },
          "customer": { "$ref": "#/components/schemas/CustomerDetails" },
          "picker": {
            "type": "object",
            "properties": {
              "name": { "type": "string", "example": "Ravi Kumar" },
              "phone": { "type": "string", "example": "9876543210" },
              "email": { "type": "string", "example": "ravi@picker.com" }
            }
          },
          "cartItems": { "type": "array", "items": { "$ref": "#/components/schemas/CartItem" } },
          "address": { "$ref": "#/components/schemas/Address" },
          "payment": { "$ref": "#/components/schemas/Payment" },
          "subtotal": { "type": "number", "example": 1250 },
          "orderStatus": { "type": "string", "example": "On the Way" },
          "isDeliveryAccepted": { "type": "boolean", "example": true },
          "deliveryPersonDetails": { "$ref": "#/components/schemas/DeliveryPersonDetails" },
          "createdAt": { "type": "string", "format": "date-time", "example": "2025-10-25T10:30:00.000Z" }
        }
      },
      "OrderCancel": {
        "type": "object",
        "properties": {
          "reason": { "type": "string", "example": "Customer requested cancellation due to change in schedule" },
          "orderStatus": { "type": "string", "enum": ["Cancelled"], "example": "Cancelled" },
          "cancelledAt": { "type": "string", "format": "date-time", "example": "2025-10-15T09:30:00.000Z" }
        },
        "required": ["reason"]
      },


        "ServiceBooking": {
          "type": "object",
          "properties": {
            "customerId": {
              "type": "string",
              "example": "6710d40ef8c1f9a4a5b6c123"
            },
            "serviceItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "serviceId": {
                    "type": "string",
                    "example": "6710d4f1b3a9a0a6a6b8e124"
                  },
                  "productImage": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                  },
                  "productName": {
                    "type": "string",
                    "example": "AC Cleaning"
                  },
                  "description": {
                    "type": "string",
                    "example": "Full AC cleaning and service"
                  },
                  "serviceCharges": {
                    "type": "number",
                    "example": 600
                  },
                  "serviceStore": {
                    "type": "object",
                    "properties": {
                      "storeName": {
                        "type": "string",
                        "example": "CoolCare Services"
                      },
                      "storeAddress": {
                        "type": "string",
                        "example": "123 Anna Nagar, Chennai"
                      },
                      "contactNumber": {
                        "type": "string",
                        "example": "9876543210"
                      }
                    }
                  }
                }
              }
            },
            "address": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "example": "No.10, Gandhi Street"
                },
                "city": {
                  "type": "string",
                  "example": "Chennai"
                },
                "pincode": {
                  "type": "string",
                  "example": "600040"
                },
                "location": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "Point"
                    },
                    "coordinates": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "example": [
                        80.2707,
                        13.0827
                      ]
                    }
                  }
                }
              }
            },
            "date": {
              "type": "string",
              "format": "date",
              "example": "2025-10-12"
            },
            "time": {
              "type": "string",
              "example": "14:30"
            },
            "payment": {
              "type": "object",
              "properties": {
                "method": {
                  "type": "string",
                  "example": "Online"
                },
                "transactionId": {
                  "type": "string",
                  "example": "TXN12345ABC"
                },
                "amount": {
                  "type": "number",
                  "example": 600
                },
                "status": {
                  "type": "string",
                  "example": "Pending"
                }
              }
            }
          },
          "required": [
            "customerId",
            "serviceItems",
            "address",
            "date",
            "time",
            "payment"
          ]
        },
        "ServiceBookingCancel": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "example": "Customer requested cancellation due to change in schedule"
            }
          },
          "required": [
            "reason"
          ]
        },
        "ServiceBookingUpdate": {
          "type": "object",
          "properties": {
            "serviceStatus": {
              "type": "string",
              "example": "Processing"
            },
            "payment": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Completed"
                },
                "transactionId": {
                  "type": "string",
                  "example": "TXN12345ABC"
                }
              }
            }
          }
        },

        "AddressCreate": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "123 Main Street"
            },
            "city": {
              "type": "string",
              "example": "New York"
            },
            "pincode": {
              "type": "string",
              "example": "10001"
            },
            "maxCars": {
              "type": "integer",
              "example": 2
            },
            "location": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "Point"
                },
                "coordinates": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    -73.935242,
                    40.73061
                  ]
                }
              }
            }
          },
          "required": [
            "street",
            "city",
            "pincode",
            "location"
          ]
        },
        "AddressUpdate": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "123 Main Street Updated"
            },
            "city": {
              "type": "string",
              "example": "New York Updated"
            },
            "pincode": {
              "type": "string",
              "example": "10001"
            },
            "maxCars": {
              "type": "integer",
              "example": 3
            },
            "location": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "Point"
                },
                "coordinates": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    -73.935242,
                    40.73061
                  ]
                }
              }
            }
          }
        },
        "CreateRatingRequest": {
          "type": "object",
          "properties": {
            "employeeId": {
              "type": "string",
              "example": "652ab0f3e3d1a912f0ab1234"
            },
            "customerId": {
              "type": "string",
              "example": "652ab0f3e3d1a912f0cd5678"
            },
            "score": {
              "type": "number",
              "example": 4.5
            },
            "comment": {
              "type": "string",
              "example": "Excellent washing service!"
            },
            "serviceBookingId": {
              "type": "string",
              "example": "652ab0f3e3d1a912f0aa7890"
            }
          },
          "required": [
            "employeeId",
            "score"
          ]
        },
        "UpdateRatingRequest": {
          "type": "object",
          "properties": {
            "score": {
              "type": "number",
              "example": 5
            },
            "comment": {
              "type": "string",
              "example": "Updated: very satisfied!"
            }
          }
        },
        "RatingResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "customerId": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            },
            "employeeId": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "fullName": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                }
              }
            },
            "score": {
              "type": "number",
              "format": "float"
            },
            "comment": {
              "type": "string"
            },
            "serviceBookingId": {
              "type": "string"
            },
            "isDeleted": {
              "type": "boolean",
              "example": false
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "Rating": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "score": {
              "type": "number",
              "format": "float"
            },
            "comment": {
              "type": "string"
            },
            "employeeId": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "fullName": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                }
              }
            },
            "serviceBookingId": {
              "type": "string"
            },
            "isDeleted": {
              "type": "boolean",
              "example": false
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "EmployeeSummary": {
          "type": "object",
          "properties": {
            "employee": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "avgRating": {
                  "type": "number",
                  "example": 4.2
                },
                "ratingCount": {
                  "type": "integer",
                  "example": 25
                }
              }
            }
          }
        },

         "WasherEmployee": {
      "type": "object",
      "properties": {
        "fullName": { "type": "string" },
        "phone": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" },
        "dateOfBirth": { "type": "string", "format": "date" },
        "gender": { "type": "string" },
        "referralCode": { "type": "string", "description": "Auto-generated by system" },
        "referredBy": { "type": "string", "description": "Optional referral code of another user" },
        "serviceCategories": { "type": "array", "items": { "type": "string" } },
        "role": { "type": "string" },
        "address": {
          "type": "object",
          "properties": {
            "street": { "type": "string" },
            "city": { "type": "string" },
            "state": { "type": "string" },
            "postalCode": { "type": "string" },
            "country": { "type": "string" },
            "location": {
              "type": "object",
              "properties": {
                "type": { "type": "string", "example": "Point" },
                "coordinates": { "type": "array", "items": { "type": "number" } }
              }
            }
          }
        }
      }
    },
        
        "AcceptDeclineBooking": {
          "type": "object",
          "properties": {
            "bookingId": {
              "type": "string",
              "example": "6710d4f1b3a9a0a6a6b8e125"
            },
            "washerId": {
              "type": "string",
              "example": "6710d4f1b3a9a0a6a6b8e999"
            }
          },
          "required": [
            "bookingId",
            "washerId"
          ]
        },
        "WasherEmpSchedule": {
          "type": "object",
          "properties": {
            "washerEmployeeId": {
              "type": "string"
            },
            "bookingId": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "On the Way",
                "Started",
                "Completed",
                "Declined"
              ]
            },
            "bookingSummary": {
              "type": "object",
              "properties": {
                "vehicleType": {
                  "type": "string",
                  "example": "Car"
                },
                "packageName": {
                  "type": "string",
                  "example": "Standard Wash"
                },
                "serviceType": {
                  "type": "string",
                  "example": "Express"
                },
                "date": {
                  "type": "string",
                  "example": "2025-06-10"
                },
                "time": {
                  "type": "string",
                  "example": "09:00 AM"
                },
                "expressCharge": {
                  "type": "number",
                  "example": 10
                },
                "advanceBookingCharge": {
                  "type": "number",
                  "example": 10
                },
                "discountAmount": {
                  "type": "number",
                  "example": 5
                },
                "couponCode": {
                  "type": "string",
                  "example": "SAVE5"
                },
                "basePrice": {
                  "type": "number",
                  "example": 30
                },
                "totalAmount": {
                  "type": "number",
                  "example": 45
                }
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "AcceptDeclineOrder": {
          "type": "object",
          "properties": {
            "customerShoppingId": {
              "type": "string",
              "example": "652a1f3e2b9871dabc123456"
            },
            "deliveryPersonId": {
              "type": "string",
              "example": "652a1f3e2b9871dabc654321"
            }
          },
          "required": [
            "customerShoppingId",
            "deliveryPersonId"
          ]
        },
        "DeliveryPersonSchedule": {
          "type": "object",
          "properties": {
            "deliveryPersonId": {
              "type": "string"
            },
            "customerShoppingId": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "On the Way",
                "Picked Up",
                "Completed",
                "Cancelled"
              ]
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            },
            "orderSummary": {
              "type": "object",
              "properties": {
                "cartTotal": {
                  "type": "number"
                },
                "paymentAmount": {
                  "type": "number"
                },
                "orderStatus": {
                  "type": "string"
                },
                "address": {
                  "type": "object"
                }
              }
            }
          }
        },


          "RepairTechnician": {
      "type": "object",
      "properties": {
        "fullName": { "type": "string", "example": "John Doe" },
        "phoneNumber": { "type": "string", "example": "9876543210" },
        "email": { "type": "string", "example": "johndoe@gmail.com" },
        "password": { "type": "string", "example": "securePass123" },
        "dateOfBirth": { "type": "string", "format": "date", "example": "1990-01-01" },
        "gender": { "type": "string", "enum": ["Male", "Female", "Other"], "example": "Male" },
        "role": { "type": "string", "example": "Repair Service Technician" },
        "yearsOfExperience": { "type": "integer", "example": 5 },
        "profilePhoto": { "type": "string", "example": "uploads/profile.jpg" },
        "specializations": { "type": "array", "items": { "type": "string" }, "example": ["AC Repair","Refrigerator Maintenance"] },
        "shopDetails": { "$ref": "#/components/schemas/ShopDetails" },
        "services": { "type": "array", "items": { "$ref": "#/components/schemas/Service" } },
        "payoutDetails": { "$ref": "#/components/schemas/PayoutDetails" },
        "referredBy": { "type": "string", "example": "ABC123", "description": "Optional code of the person who referred" }
      },
      "required": ["fullName", "phoneNumber", "email", "password", "role"]
    },
    "ShopDetails": {
      "type": "object",
      "properties": {
        "shopName": { "type": "string", "example": "John's Repair Shop" },
        "shopType": { "type": "string", "example": "AC & Refrigerator" },
        "shopAddress": { "type": "string", "example": "123 Main Street, Chennai" },
        "location": { 
          "type": "object",
          "properties": {
            "type": { "type": "string", "example": "Point" },
            "coordinates": { "type": "array", "items": { "type": "number" }, "example": [80.2707, 13.0827] }
          }
        },
        "shopImages": { "type": "array", "items": { "type": "string" }, "example": ["uploads/shop1.jpg","uploads/shop2.jpg"] }
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "itemName": { "type": "string", "example": "AC Service" },
        "subTitle": { "type": "string", "example": "Standard package" },
        "description": { "type": "string", "example": "Complete AC cleaning and maintenance" },
        "minPrice": { "type": "number", "example": 500 },
        "maxPrice": { "type": "number", "example": 1000 },
        "itemImage": { "type": "string", "example": "uploads/service1.jpg" }
      }
    },
    "PayoutDetails": {
      "type": "object",
      "properties": {
        "accountName": { "type": "string", "example": "John Doe" },
        "accountNumber": { "type": "string", "example": "1234567890" },
        "ifscCode": { "type": "string", "example": "SBIN0001234" },
        "idProof": { "type": "array", "items": { "type": "string" }, "example": ["uploads/aadhaar.jpg"] },
        "termsAccepted": { "type": "boolean", "example": true }
      }
    },


      "CreateServiceRequest": {
        "type": "object",
        "required": ["itemName", "description", "minPrice", "maxPrice", "repairTechnicianId", "itemImage"],
        "properties": {
          "itemName": { "type": "string", "example": "Air Conditioner Repair" },
          "subTitle": { "type": "string", "example": "Quick and reliable AC repair" },
          "description": { "type": "string", "example": "We fix all types of AC issues including cooling and compressor faults." },
          "minPrice": { "type": "number", "example": 499 },
          "maxPrice": { "type": "number", "example": 1299 },
          "repairTechnicianId": { "type": "string", "example": "6712d9b4a60f8e91a4e6b1f5" },
          "itemImage": { "type": "string", "format": "binary" }
        }
      },
      "UpdateServiceRequest": {
        "type": "object",
        "properties": {
          "itemName": { "type": "string", "example": "AC Repair and Cleaning" },
          "subTitle": { "type": "string", "example": "Updated service details" },
          "description": { "type": "string", "example": "Comprehensive AC maintenance and cleaning services" },
          "minPrice": { "type": "number", "example": 599 },
          "maxPrice": { "type": "number", "example": 1499 },
          "itemImage": { "type": "string", "format": "binary" }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "6712da13c4b92e91c9a2f812" },
          "itemName": { "type": "string", "example": "AC Repair" },
          "subTitle": { "type": "string", "example": "Expert repair at affordable prices" },
          "description": { "type": "string", "example": "Fixing AC cooling, gas refilling, and general maintenance." },
          "itemImage": { "type": "string", "example": "uploads/services/ac_repair.png" },
          "minPrice": { "type": "number", "example": 499 },
          "maxPrice": { "type": "number", "example": 1299 },
          "repairTechnicianId": {
            "type": "object",
            "properties": {
              "_id": { "type": "string", "example": "6712d9b4a60f8e91a4e6b1f5" },
              "fullName": { "type": "string", "example": "John Doe" },
              "email": { "type": "string", "example": "john@example.com" },
              "role": { "type": "string", "example": "Repair Service Technician" }
            }
          },
          "createdAt": { "type": "string", "format": "date-time", "example": "2025-10-18T10:45:00Z" }
        }
      },
      "GetAllServicesResponse": {
        "type": "object",
        "properties": {
          "count": { "type": "integer", "example": 5 },
          "services": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Service" }
          }
        }
      },
       

      
 "AcceptServiceRequest": {
        "type": "object",
        "required": ["customerServiceId", "repairTechnicianId"],
        "properties": {
          "customerServiceId": {
            "type": "string",
            "example": "652b1f3e2b9871dabc123456"
          },
          "repairTechnicianId": {
            "type": "string",
            "example": "652b1f3e2b9871dabc654321"
          }
        }
      },
      "AcceptServiceResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Service accepted and status updated"
          },
          "schedule": {
            "$ref": "#/components/schemas/RepairTechnicianSchedule"
          },
          "updatedService": {
            "type": "object",
            "example": {
              "_id": "652b1f3e2b9871dabc123456",
              "serviceStatus": "On the Way",
              "date": "2025-10-16T10:30:00.000Z"
            }
          }
        }
      },
      "DeclineServiceRequest": {
        "type": "object",
        "required": ["customerServiceId", "repairTechnicianId"],
        "properties": {
          "customerServiceId": {
            "type": "string",
            "example": "652b1f3e2b9871dabc123456"
          },
          "repairTechnicianId": {
            "type": "string",
            "example": "652b1f3e2b9871dabc654321"
          }
        }
      },
      "UpdateServiceStatus": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["On the Way", "Service Started", "Completed", "Cancelled"],
            "example": "Completed"
          }
        }
      },
      "RepairTechnicianSchedule": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "652a2b3e1a4567cdef123456"
          },
          "repairTechnicianId": {
            "type": "string",
            "example": "652b1f3e2b9871dabc654321"
          },
          "customerServiceId": {
            "type": "string",
            "example": "652b1f3e2b9871dabc123456"
          },
          "status": {
            "type": "string",
            "enum": ["On the Way", "Service Started", "Completed", "Cancelled"],
            "example": "On the Way"
          },
          "createdAt": {
            "type": "string",
            "example": "2025-10-16T10:15:30.000Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-10-16T10:30:00.000Z"
          }
        }
      },

        "ProductSellerInput": {
          "type": "object",
          "properties": {
            "fullName": {
              "type": "string",
              "example": "John Doe"
            },
            "phoneNumber": {
              "type": "string",
              "example": "9876543210"
            },
            "email": {
              "type": "string",
              "example": "johndoe@example.com"
            },
            "password": {
              "type": "string",
              "example": "password123"
            },
            "dateOfBirth": {
              "type": "string",
              "format": "date",
              "example": "1990-01-01"
            },
            "gender": {
              "type": "string",
              "enum": [
                "Male",
                "Female",
                "Other"
              ],
              "example": "Male"
            },
            "role": {
              "type": "string",
              "example": "Product Seller"
            },
            "shopDetails": {
              "type": "object",
              "properties": {
                "shopName": {
                  "type": "string",
                  "example": "John's Store"
                },
                "shopType": {
                  "type": "string",
                  "example": "Electronics"
                },
                "shopAddress": {
                  "type": "string",
                  "example": "123 Main Street"
                },
                "shopImages": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "uploads/shop1.jpg"
                  }
                }
              }
            },
            "products": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "productTitle": {
                    "type": "string",
                    "example": "Smartphone"
                  },
                  "productDescription": {
                    "type": "string",
                    "example": "Latest model"
                  },
                  "unitPrice": {
                    "type": "number",
                    "example": 15000
                  },
                  "stockQuantity": {
                    "type": "number",
                    "example": 10
                  },
                  "productImage": {
                    "type": "string",
                    "example": "uploads/product1.jpg"
                  }
                }
              }
            },
            "payoutDetails": {
              "type": "object",
              "properties": {
                "accountName": {
                  "type": "string",
                  "example": "John Doe"
                },
                "accountNumber": {
                  "type": "string",
                  "example": "1234567890"
                },
                "ifscCode": {
                  "type": "string",
                  "example": "ABCD0123456"
                },
                "idProof": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "uploads/aadhaar.pdf"
                  }
                },
                "termsAccepted": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "required": [
            "fullName",
            "phoneNumber",
            "email",
            "password"
          ]
        },
        "Product": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "productTitle": {
              "type": "string"
            },
            "productDescription": {
              "type": "string"
            },
            "unitPrice": {
              "type": "number"
            },
            "stockQuantity": {
              "type": "number"
            },
            "productImage": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string"
            }
          }
        },
        "ProductSeller": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ProductSellerInput"
            },
            {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "products": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                },
                "createdAt": {
                  "type": "string"
                },
                "updatedAt": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "ProductSellerResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "data": {
              "$ref": "#/components/schemas/ProductSeller"
            }
          }
        },
        "Product": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "sellerId": {
              "type": "string",
              "example": "64f123abc456def78901234"
            },
            "productTitle": {
              "type": "string",
              "example": "Car Shampoo"
            },
            "productDescription": {
              "type": "string",
              "example": "High-quality car shampoo"
            },
            "unitPrice": {
              "type": "number",
              "example": 299
            },
            "stockQuantity": {
              "type": "number",
              "example": 50
            },
            "productImage": {
              "type": "string",
              "example": "uploads/products/product1.jpg"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "ProductResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "product": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "ProductsListResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "count": {
              "type": "number"
            },
            "products": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        
        "AcceptOrderRequest": {
          "type": "object",
          "required": [
            "sellerId",
            "customerShoppingId",
            "deliveryPersonId"
          ],
          "properties": {
            "sellerId": {
              "type": "string",
              "example": "64f1a1b2..."
            },
            "customerShoppingId": {
              "type": "string",
              "example": "64f1b2c3..."
            },
            "deliveryPersonId": {
              "type": "string",
              "example": "64f1d1b3..."
            },
            "customerName": {
              "type": "string",
              "example": "Sophia Bennett"
            },
            "customerPhone": {
              "type": "string",
              "example": "9876543210"
            },
            "estimatedDelivery": {
              "type": "string",
              "format": "date-time",
              "example": "2025-10-17T14:30:00Z"
            }
          }
        },
        "UpdateOrderStatusRequest": {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "Pending",
                "Accepted",
                "Packed",
                "Dispatched",
                "Delivering",
                "Delivered",
                "Cancelled"
              ],
              "example": "Delivering"
            },
            "remarks": {
              "type": "string",
              "example": "Packed and ready for dispatch"
            },
            "deliveryPersonId": {
              "type": "string",
              "example": "64f1d1b3..."
            },
            "estimatedDelivery": {
              "type": "string",
              "format": "date-time",
              "example": "2025-10-17T14:30:00Z"
            }
          }
        },
        "ProductSnapshot": {
          "type": "object",
          "properties": {
            "productId": {
              "type": "string"
            },
            "productImage": {
              "type": "string"
            },
            "productTitle": {
              "type": "string"
            },
            "productDescription": {
              "type": "string"
            },
            "unitPrice": {
              "type": "number"
            },
            "stockQuantity": {
              "type": "number"
            },
            "quantityOrdered": {
              "type": "number"
            },
            "total": {
              "type": "number"
            }
          }
        },
        "SellerOrderTrackResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "sellerId": {
              "type": "string"
            },
            "customerShoppingId": {
              "type": "string"
            },
            "customer": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              }
            },
            "products": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ProductSnapshot"
              }
            },
            "deliveryPartner": {
              "type": "object",
              "properties": {
                "deliveryPersonId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "vehicle": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "license": {
                      "type": "string"
                    }
                  }
                },
                "estimatedDelivery": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "status": {
              "type": "string",
              "example": "Delivering"
            },
            "remarks": {
              "type": "string"
            },
            "updatedBy": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },

        "ContactQueryCreate": {
          "type": "object",
          "properties": {
            "fullName": {
              "type": "string",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "example": "john@example.com"
            },
            "phoneNumber": {
              "type": "string",
              "example": "9876543210"
            },
            "category": {
              "type": "string",
              "example": "General Inquiry"
            },
            "message": {
              "type": "string",
              "example": "I need help with my booking."
            }
          },
          "required": [
            "fullName",
            "email",
            "phoneNumber",
            "category",
            "message"
          ]
        },
        "ContactQueryResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "652a1f3e2b9871dabc123456"
            },
            "fullName": {
              "type": "string",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "example": "john@example.com"
            },
            "phoneNumber": {
              "type": "string",
              "example": "9876543210"
            },
            "category": {
              "type": "string",
              "example": "General Inquiry"
            },
            "message": {
              "type": "string",
              "example": "I need help with my booking."
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2025-10-17T10:30:00.000Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2025-10-17T10:30:00.000Z"
            }
          }
        },

        "AdminRegister": {
          "type": "object",
          "properties": {
            "adminId": {
              "type": "string",
              "example": "admin001",
              "description": "Unique admin identifier"
            },
            "fullName": {
              "type": "string",
              "example": "Naveen Kumar"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "naveen@example.com"
            },
            "password": {
              "type": "string",
              "format": "password",
              "example": "Admin@123"
            }
          },
          "required": [
            "adminId",
            "fullName",
            "email",
            "password"
          ]
        },
        "AdminLogin": {
          "type": "object",
          "properties": {
            "adminId": {
              "type": "string",
              "example": "admin001"
            },
            "password": {
              "type": "string",
              "format": "password",
              "example": "Admin@123"
            }
          },
          "required": [
            "adminId",
            "password"
          ]
        },
        "AdminDetails": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "652a1f3e2b9871dabc123456"
            },
            "adminId": {
              "type": "string",
              "example": "admin123"
            },
            "fullName": {
              "type": "string",
              "example": "Naveen Kumar"
            },
            "email": {
              "type": "string",
              "example": "naveen@gmail.com"
            },
            "role": {
              "type": "string",
              "example": "Admin"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2025-10-18T05:28:26.917Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2025-10-18T05:28:26.917Z"
            }
          }
        },
       "AdminUpdate": {
  "type": "object",
  "properties": {
    "adminId": {
      "type": "string",
      "example": "admin002",
      "description": "Unique admin identifier (editable)"
    },
    "fullName": {
      "type": "string",
      "example": "Naveen Kumar"
    },
    "email": {
      "type": "string",
      "example": "naveen@gmail.com"
    },
    "password": {
      "type": "string",
      "example": "newpassword123"
    }
  }
},
        "AdminResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "652a1f3e2b9871dabc123456"
            },
            "adminId": {
              "type": "string",
              "example": "admin001"
            },
            "fullName": {
              "type": "string",
              "example": "Naveen Kumar"
            },
            "email": {
              "type": "string",
              "example": "naveen@example.com"
            },
            "role": {
              "type": "string",
              "example": "admin"
            }
          }
        },
        "AdminLoginResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "example": "Admin logged in successfully"
            },
            "admin": {
              "$ref": "#/components/schemas/AdminResponse"
            },
            "token": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
          }
        },


          "User": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "68f9c2170d9b2ef90dcdf1ff" },
          "fullName": { "type": "string", "example": "Surya Doe" },
          "phoneNumber": { "type": "string", "example": "9876543121" },
          "email": { "type": "string", "example": "surya@example.com" },
          "referralCode": { "type": "string", "example": "TF6QV3" },
          "referredBy": { "type": "string", "nullable": true },
          "isActive": { "type": "boolean", "example": true },
          "createdAt": { "type": "string", "format": "date-time", "example": "2025-10-23T05:50:15.241Z" },
          "updatedAt": { "type": "string", "format": "date-time", "example": "2025-10-23T05:50:15.241Z" }
        }
      },
      "Technician": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "68f9c2170d9b2ef90dcdf123" },
          "fullName": { "type": "string", "example": "John Doe" },
          "phoneNumber": { "type": "string", "example": "9876543210" },
          "email": { "type": "string", "example": "john@example.com" },
          "isActive": { "type": "boolean", "example": true },
          "role": { "type": "string", "example": "Repair Service Technician" },
          "createdAt": { "type": "string", "format": "date-time", "example": "2025-10-23T05:50:15.241Z" },
          "updatedAt": { "type": "string", "format": "date-time", "example": "2025-10-23T05:50:15.241Z" }
        }
      },
      "ProductSellers": {
  "type": "object",
  "properties": {
    "_id": { "type": "string", "example": "68f9c2170d9b2ef90dcdf456" },
    "fullName": { "type": "string", "example": "Alice Doe" },
    "phoneNumber": { "type": "string", "example": "9876543212" },
    "email": { "type": "string", "example": "alice@example.com" },
    "isActive": { "type": "boolean", "example": true },
    "role": { "type": "string", "example": "Product Seller" },
    "shopDetails": {
      "type": "object",
      "properties": {
        "shopName": { "type": "string", "example": "Alice's Store" },
        "shopType": { "type": "string", "example": "Electronics" },
        "shopAddress": { "type": "string", "example": "123 Main Street, City" },
        "location": {
          "type": "object",
          "properties": {
            "type": { "type": "string", "example": "Point" },
            "coordinates": {
              "type": "array",
              "items": { "type": "number" },
              "example": [77.5946, 12.9716]
            }
          }
        },
        "shopImages": { "type": "array", "items": { "type": "string" } }
      }
    },
    "createdAt": { "type": "string", "format": "date-time", "example": "2025-10-23T05:50:15.241Z" },
    "updatedAt": { "type": "string", "format": "date-time", "example": "2025-10-23T05:50:15.241Z" }
  }
},
"Employee": {
  "type": "object",
  "properties": {
    "_id": { "type": "string", "example": "68f9c2170d9b2ef90dcdf789" },
    "fullName": { "type": "string", "example": "Bob Doe" },
    "phone": { "type": "string", "example": "9876543213" },
    "email": { "type": "string", "example": "bob@example.com" },
    "role": { "type": "string", "example": "Washing Personnel" },
    "isActive": { "type": "boolean", "example": true },
    "createdAt": { "type": "string", "format": "date-time", "example": "2025-10-23T05:50:15.241Z" },
    "updatedAt": { "type": "string", "format": "date-time", "example": "2025-10-23T05:50:15.241Z" }
  }
},




        "AssignOrderRequest": {
        "type": "object",
        "required": ["customerName","serviceType","orderDate","assignedEmployee","employeeModel"],
        "properties": {
          "customerName": { "type": "string", "example": "Liam Carter" },
          "serviceType": { "type": "string", "example": "Delivery" },
          "orderDate": { "type": "string", "format": "date", "example": "2025-10-20" },
          "assignedEmployee": { "type": "string", "example": "68f4877162af0bd0d2aa9e4d" },
          "employeeModel": { "type": "string", "example": "DeliveryPartner" },
          "description": { "type": "string", "example": "Customer requested express delivery" }
        }
      },
      "AssignOrderUpdateRequest": {
        "type": "object",
        "properties": {
          "customerName": { "type": "string" },
          "serviceType": { "type": "string" },
          "orderDate": { "type": "string", "format": "date" },
          "assignedEmployee": { "type": "string" },
          "employeeModel": { "type": "string" },
          "description": { "type": "string" },
          "status": { "type": "string", "enum": ["Assigned","Cancelled","Completed"] }
        }
      },
      "AssignOrderResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Order assigned successfully" },
          "data": { "$ref": "#/components/schemas/AssignOrderObject" }
        }
      },
      "AssignOrderListResponse": {
        "type": "object",
        "properties": {
          "count": { "type": "integer", "example": 5 },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/AssignOrderObject" } }
        }
      },
      "AssignOrderObject": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "68f48912a857da33609f7b0a" },
          "customerName": { "type": "string", "example": "Liam Carter" },
          "serviceType": { "type": "string", "example": "Delivery" },
          "orderDate": { "type": "string", "format": "date", "example": "2025-10-20" },
          "assignedEmployee": {
            "oneOf": [
              { "type": "string", "example": "68f4877162af0bd0d2aa9e4d" },
              {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "fullName": { "type": "string" },
                  "email": { "type": "string" },
                  "role": { "type": "string" }
                }
              }
            ]
          },
          "employeeModel": { "type": "string", "example": "DeliveryPartner" },
          "description": { "type": "string", "example": "Customer requested express delivery" },
          "status": { "type": "string", "example": "Assigned" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },

         "SubAdmin": {
        "type": "object",
        "properties": {
          "fullName": { "type": "string", "example": "John Doe" },
          "email": { "type": "string", "example": "john.doe@example.com" },
          "phoneNumber": { "type": "string", "example": "(123) 456-7890" },
          "password": { "type": "string", "example": "********" }
        },
        "required": ["fullName", "email", "phoneNumber", "password"]
      },
      "CreateBranchRequest": {
        "type": "object",
        "properties": {
          "branchName": { "type": "string", "example": "Main Street Branch" },
          "branchAddress": { "type": "string", "example": "123 Main St, Anytown, USA 12345" },
          "subAdmin": { "$ref": "#/components/schemas/SubAdmin" }
        },
        "required": ["branchName", "branchAddress", "subAdmin"]
      },
      "UpdateBranchRequest": {
        "type": "object",
        "properties": {
          "branchName": { "type": "string" },
          "branchAddress": { "type": "string" },
          "subAdmin": { "$ref": "#/components/schemas/SubAdmin" },
          "isActive": { "type": "boolean" }
        }
      },
      "BranchResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Branch created successfully" },
          "data": {
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "branchName": { "type": "string" },
              "branchAddress": { "type": "string" },
              "subAdmin": { "$ref": "#/components/schemas/SubAdmin" },
              "isActive": { "type": "boolean" },
              "createdAt": { "type": "string" },
              "updatedAt": { "type": "string" }
            }
          }
        }
      },
      "BranchesListResponse": {
        "type": "object",
        "properties": {
          "count": { "type": "integer" },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BranchResponse" }
          }
        }
      },


       "Referral": {
      "type": "object",
      "properties": {
        "_id": { "type": "string", "example": "676b9123fcdad21b08f00111" },
        "referrerId": { "type": "string", "example": "65f1e23a91b4cd0012a11bcd" },
        "referrerName": { "type": "string", "example": "Ethan Harper" },
        "referrerType": {
          "type": "string",
          "enum": ["Customer", "WasherEmployee", "RepairTechnician", "ProductSeller", "DeliveryPerson"],
          "example": "Customer"
        },
        "referralCode": { "type": "string", "example": "REF123" },
        "referredUserId": { "type": "string", "example": "65f1e23a91b4cd0012a22bde" },
        "referredUserName": { "type": "string", "example": "Benjamin Carter" },
        "referredUserType": {
          "type": "string",
          "enum": ["Customer", "WasherEmployee", "RepairTechnician", "ProductSeller", "DeliveryPerson"],
          "example": "Customer"
        },
        "signupDate": { "type": "string", "format": "date-time", "example": "2023-10-26T00:00:00.000Z" },
        "firstServiceBooked": { "type": "string", "example": "Premium Plan Subscription" },
        "usedCode": { "type": "string", "example": "AMELIA12" },
        "status": {
          "type": "string",
          "enum": ["Pending", "Approved", "Rejected"],
          "example": "Pending"
        },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
"ReferralDetailsByUserResponse": {
  "type": "object",
  "properties": {
    "message": { "type": "string", "example": "Referral details fetched successfully" },
    "data": {
      "type": "object",
      "properties": {
        "referrerDetails": {
          "type": "object",
          "properties": {
            "referrerName": { "type": "string", "example": "krish" },
            "referrerId": { "type": "string", "example": "68fdaeb94406efcb66003ff8" },
            "referrerType": { "type": "string", "example": "WasherEmployee" },
            "referralCode": { "type": "string", "example": "411KYF" },
            "totalSuccessfulReferrals": { "type": "integer", "example": 5 }
          }
        },
        "referredPersonDetails": {
          "type": "object",
          "properties": {
            "newUserName": { "type": "string", "example": "dinesh" },
            "userType": { "type": "string", "example": "WasherEmployee" },
            "signupDate": { "type": "string", "format": "date-time", "example": "2025-10-25T09:47:09.263Z" },
            "usedCode": { "type": "string", "example": "REF1221" },
            "status": { "type": "string", "example": "Pending" }
          }
        }
      }
    }
  }
},

    "ReferralListResponse": {
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "All referrals fetched successfully" },
        "data": {
          "type": "array",
          "items": { "$ref": "#/components/schemas/Referral" }
        }
      }
    },

    "ReferralDetailResponse": {
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Referral details fetched successfully" },
        "data": {
          "type": "object",
          "properties": {
            "referrerDetails": {
              "type": "object",
              "properties": {
                "referrerName": { "type": "string", "example": "Amelia Chen" },
                "referrerId": { "type": "string", "example": "UID-789012" },
                "referrerType": { "type": "string", "example": "Customer" },
                "totalSuccessfulReferrals": { "type": "integer", "example": 12 },
                "specificCodeShared": { "type": "string", "example": "AMELIA12" }
              }
            },
            "referredPersonDetails": {
              "type": "object",
              "properties": {
                "newUserName": { "type": "string", "example": "Benjamin Carter" },
                "userType": { "type": "string", "example": "Customer" },
                "signupDate": { "type": "string", "format": "date", "example": "2023-10-26" },
                "firstServiceBooked": { "type": "string", "example": "Premium Plan Subscription" },
                "usedCode": { "type": "string", "example": "AMELIA12" },
                "status": { "type": "string", "example": "Pending" }
              }
            }
          }
        }
      }
    },

    "ReferralStatusResponse": {
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Referral Approved" },
        "data": { "$ref": "#/components/schemas/Referral" }
      }
    }
      }
    },
    "tags": [
      {
        "name": "Customer",
        "description": "Manage customer accounts"
      },
      {
        "name": "CustomerBanner",
        "description": "Manage banners for customers"
      },
      {
        "name": "ServiceType",
        "description": "Manage Wash Service Types"
      },
      {
        "name": "Wash Booking",
        "description": "Manage car wash bookings"
      },
      {
        "name": "Cart",
        "description": "Operations related to cart management"
      },
      {
        "name": "CustomerShopping",
        "description": "Manage customer shopping orders"
      },
      {
        "name": "ServiceBooking",
        "description": "Manage customer service booking orders"
      },
      {
        "name": "Address",
        "description": "APIs related to customer addresses"
      },
      {
        "name": "Ratings",
        "description": "Endpoints related to customer ratings for service employees"
      },
      {
        "name": "WasherEmployee",
        "description": "Manage WasherEmployee Registration"
      },
      {
        "name": "WasherEmpSchedule",
        "description": "Endpoints for managing washer employee schedules"
      },
      {
        "name": "DeliveryPersonSchedule",
        "description": "Operations related to delivery person schedules"
      },
      {
        "name": "RepairTechnician",
        "description": "API endpoints for Repair Service Technician management"
      },
      {
      "name": "RepairService",
      "description": "Endpoints for managing repair services"
    },
      {
        "name": "Repair Technician Schedule",
        "description": "APIs for managing repair technician service schedules"
      },
      {
        "name": "ProductSeller",
        "description": "API endpoints for Product Sellers"
      },
      {
        "name": "Product",
        "description": "API endpoints for managing product details and uploads."
      },
      {
        "name": "SellerOrderTrack",
        "description": "Operations related to seller order tracking"
      },
      {
        "name": "ContactQuery",
        "description": "APIs for handling contact queries from users"
      },
      {
        "name": "Admin",
        "description": "APIs for managing admin registration, login, and CRUD operations"
      },
      {
      "name": "AdminUser",
      "description": "Admin user management operations"
    },
       {
      "name": "AssignOrder",
      "description": "Endpoints to manage assigned orders"
    },
    {
      "name": "Branch",
      "description": "Operations related to branches and sub-admins"
    },
      {
    "name": "AdminReferral",
    "description": "APIs for Admin to view, approve or reject user referrals"
  } 
     ]
  }