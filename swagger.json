  {
    "openapi": "3.0.0",
    "info": {
      "title": "Sparkle Wash API Documentation",
      "version": "1.0.0",
      "description": "API documentation for Car Wash, Service, and Order management system",
      "contact": {
        "name": "Naveen",
        "email": "support@sparklewash.com"
      }
    },
    "servers": [
      {
        "url": "http://localhost:5000"
      }
    ],
    "paths": {
      "/User/registerUser": {
        "post": {
          "tags": [
            "Customer"
          ],
          "summary": "Register a new user",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerRegister"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User registered successfully"
            },
            "400": {
              "description": "Bad request / Missing fields"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/login": {
        "post": {
          "tags": [
            "Customer"
          ],
          "summary": "Login user",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLogin"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful"
            },
            "400": {
              "description": "Invalid credentials"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/getAllUsers": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Get all users",
          "responses": {
            "200": {
              "description": "List of users fetched successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/getUserById/{id}": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Get user by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "User ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User fetched successfully"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/updateProfile/{id}": {
        "put": {
          "tags": [
            "Customer"
          ],
          "summary": "Update a user by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "User ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "User updated successfully âœ…"
                      },
                      "user": {
                        "$ref": "#/components/schemas/CustomerResponse"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/User/deleteUser/{id}": {
        "delete": {
          "tags": [
            "Customer"
          ],
          "summary": "Delete a user by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "User ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User deleted successfully"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/banner/createCustomerBanner": {
        "post": {
          "tags": [
            "CustomerBanner"
          ],
          "summary": "Create a new banner",
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Banner"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Banner created successfully"
            },
            "500": {
              "description": "Error creating banner"
            }
          }
        }
      },
      "/banner/getallCustomerBanner": {
        "get": {
          "tags": [
            "CustomerBanner"
          ],
          "summary": "Get all banners",
          "responses": {
            "200": {
              "description": "List of all banners"
            },
            "500": {
              "description": "Error fetching banners"
            }
          }
        }
      },
      "/banner/updateCustomerBanner/{id}": {
        "put": {
          "tags": [
            "CustomerBanner"
          ],
          "summary": "Update a banner by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Banner ID"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Banner"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Banner updated successfully"
            },
            "404": {
              "description": "Banner not found"
            },
            "500": {
              "description": "Error updating banner"
            }
          }
        }
      },
      "/banner/deleteCustomerBanner/{id}": {
        "delete": {
          "tags": [
            "CustomerBanner"
          ],
          "summary": "Delete a banner by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Banner ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Banner deleted successfully"
            },
            "404": {
              "description": "Banner not found"
            },
            "500": {
              "description": "Error deleting banner"
            }
          }
        }
      },
      "/service/create": {
        "post": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Create a new wash service type",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashService"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Service created successfully"
            },
            "500": {
              "description": "Error creating service"
            }
          }
        }
      },
      "/service/getall": {
        "get": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Get all wash service types",
          "responses": {
            "200": {
              "description": "List of all services"
            },
            "500": {
              "description": "Error fetching services"
            }
          }
        }
      },
      "/service/{id}": {
        "get": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Get a service type by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Service fetched successfully"
            },
            "404": {
              "description": "Service not found"
            },
            "500": {
              "description": "Error fetching service"
            }
          }
        }
      },
      "/service/update/{id}": {
        "put": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Update a service type by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashService"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Service updated successfully"
            },
            "404": {
              "description": "Service not found"
            },
            "500": {
              "description": "Error updating service"
            }
          }
        }
      },
      "/service/delete/{id}": {
        "delete": {
          "tags": [
            "ServiceType"
          ],
          "summary": "Delete a service type by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Service deleted successfully"
            },
            "404": {
              "description": "Service not found"
            },
            "500": {
              "description": "Error deleting service"
            }
          }
        }
      },
      "/washBooking/createWashBooking": {
        "post": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Create a new wash booking",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashBooking"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Booking created successfully"
            },
            "400": {
              "description": "Missing or invalid fields"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/getAllWashBookings": {
        "get": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Fetch all wash bookings",
          "responses": {
            "200": {
              "description": "All wash bookings fetched successfully"
            },
            "404": {
              "description": "No bookings found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/getWashBookingById/{id}": {
        "get": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Fetch a wash booking by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Booking fetched successfully"
            },
            "404": {
              "description": "Booking not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/getBookingsByCustomerId/{customerId}": {
        "get": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Fetch all bookings for a specific customer",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "68e9eb5372ffcf9a50ca0d03"
            }
          ],
          "responses": {
            "200": {
              "description": "Bookings fetched successfully"
            },
            "400": {
              "description": "Invalid customer ID"
            },
            "404": {
              "description": "No bookings found for this customer"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/updateWashBooking/{id}": {
        "put": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Update a wash booking by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashBookingUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking updated successfully"
            },
            "404": {
              "description": "Booking not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/deleteWashBooking/{id}": {
        "delete": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Delete a wash booking by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Booking deleted successfully"
            },
            "404": {
              "description": "Booking not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washBooking/cancelWashBooking/{id}": {
        "put": {
          "tags": [
            "Wash Booking"
          ],
          "summary": "Cancel a wash booking by ID",
          "description": "Allows a customer or admin to cancel a wash booking and provide a reason for cancellation.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WashBookingCancel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking cancelled successfully"
            },
            "400": {
              "description": "Invalid booking ID or already cancelled"
            },
            "404": {
              "description": "Booking not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/addProductCart": {
        "post": {
          "tags": [
            "Cart"
          ],
          "summary": "Add a product to cart",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProductRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Product added to cart",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/addServiceCart": {
        "post": {
          "tags": [
            "Cart"
          ],
          "summary": "Add service items to cart",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddServiceRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Service added to cart",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/getAllCarts/all": {
        "get": {
          "tags": [
            "Cart"
          ],
          "summary": "Get all carts (admin)",
          "responses": {
            "200": {
              "description": "List of all carts",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartListResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/getCartByCustomerId/{customerId}": {
        "get": {
          "tags": [
            "Cart"
          ],
          "summary": "Get cart for a specific customer",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Customer's cart",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Cart not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/removeItemFromCart": {
        "put": {
          "tags": [
            "Cart"
          ],
          "summary": "Remove an item from cart",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveItemRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Item removed from cart",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "404": {
              "description": "Cart not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addToCart/clearCart/{customerId}": {
        "delete": {
          "tags": [
            "Cart"
          ],
          "summary": "Clear all items from a customer's cart",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Cart cleared",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Cart not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/createOrder": {
        "post": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Create a new order",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Order created successfully"
            },
            "400": {
              "description": "Missing required fields"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/getAllOrders": {
        "get": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Get all orders",
          "responses": {
            "200": {
              "description": "Orders fetched successfully"
            },
            "404": {
              "description": "No orders found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/getOrderById/{id}": {
        "get": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Get order by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Order fetched successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/getOrderedItems/{customerId}": {
        "get": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Get orders by customer ID",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "68e9eb5372ffcf9a50ca0d03"
            }
          ],
          "responses": {
            "200": {
              "description": "Customer orders fetched successfully"
            },
            "404": {
              "description": "No orders found for this customer"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/updateOrder/{id}": {
        "put": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Update an order by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order updated successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/deleteOrder/{id}": {
        "delete": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Delete an order by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Order deleted successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/CustomerShopping/cancelOrder/{id}": {
        "put": {
          "tags": [
            "CustomerShopping"
          ],
          "summary": "Cancel an order by ID",
          "description": "Allows a customer or admin to cancel an order and provide a cancellation reason.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "652a1f3e2b9871dabc123456"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCancel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order cancelled successfully"
            },
            "400": {
              "description": "Invalid order ID or already cancelled"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/createServiceOrder": {
        "post": {
          "summary": "Create a new service booking order",
          "tags": [
            "ServiceBooking"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBooking"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Service order created successfully"
            },
            "400": {
              "description": "Validation error"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/getAllServiceOrders": {
        "get": {
          "summary": "Get all service orders (Admin)",
          "tags": [
            "ServiceBooking"
          ],
          "responses": {
            "200": {
              "description": "All service orders fetched successfully"
            },
            "404": {
              "description": "No service orders found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/getServiceOrdersByCustomer/{customerId}": {
        "get": {
          "summary": "Get all service orders by customer ID",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d40ef8c1f9a4a5b6c123"
            }
          ],
          "responses": {
            "200": {
              "description": "Orders fetched successfully"
            },
            "404": {
              "description": "No service orders found for this customer"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/getServiceOrderById/{orderId}": {
        "get": {
          "summary": "Get single service order by ID",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "responses": {
            "200": {
              "description": "Service order fetched successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/cancelServiceOrder/{orderId}": {
        "put": {
          "summary": "Cancel a service order by ID",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBookingCancel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Service order cancelled successfully"
            },
            "400": {
              "description": "Order is already cancelled or missing ID"
            },
            "404": {
              "description": "Service order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/updateServiceOrder/{orderId}": {
        "put": {
          "summary": "Update a service order",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBookingUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Service order updated successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ServiceBooking/deleteServiceOrder/{orderId}": {
        "delete": {
          "summary": "Delete a service order by ID",
          "tags": [
            "ServiceBooking"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "responses": {
            "200": {
              "description": "Service order deleted successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/createAddress": {
        "post": {
          "tags": [
            "Address"
          ],
          "summary": "Create a new address",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressCreate"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Address created successfully"
            },
            "400": {
              "description": "Missing required fields"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/getAddressByCustomerId/{customerId}": {
        "get": {
          "tags": [
            "Address"
          ],
          "summary": "Get address by customer ID",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Address fetched successfully"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/getAllAddress": {
        "get": {
          "tags": [
            "Address"
          ],
          "summary": "Get all addresses",
          "responses": {
            "200": {
              "description": "Addresses fetched successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/GetAddressById/{id}": {
        "get": {
          "tags": [
            "Address"
          ],
          "summary": "Get address by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Address ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Address fetched successfully"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/updateAddress/{id}": {
        "put": {
          "tags": [
            "Address"
          ],
          "summary": "Update address by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Address ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Address updated successfully"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/address/deleteAddress/{id}": {
        "delete": {
          "tags": [
            "Address"
          ],
          "summary": "Delete address by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Address ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Address deleted successfully"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/createRating": {
        "post": {
          "tags": [
            "Ratings"
          ],
          "summary": "Create a new rating",
          "description": "Allows a customer to rate a service employee after booking.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRatingRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Rating created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RatingResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/getRatingsByCustomer/{customerId}": {
        "get": {
          "tags": [
            "Ratings"
          ],
          "summary": "Get all ratings by a customer",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID"
            }
          ],
          "responses": {
            "200": {
              "description": "List of ratings by the customer",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "ratings": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RatingResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid customerId"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/getRatingsByEmployee/{employeeId}": {
        "get": {
          "tags": [
            "Ratings"
          ],
          "summary": "Get all ratings for a specific employee",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Employee ID"
            }
          ],
          "responses": {
            "200": {
              "description": "List of ratings for the employee",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "ratings": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RatingResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/getEmployeeSummary/{employeeId}/summary": {
        "get": {
          "tags": [
            "Ratings"
          ],
          "summary": "Get employee rating summary",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Employee ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Employee average rating summary",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EmployeeSummary"
                  }
                }
              }
            },
            "404": {
              "description": "Employee not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/RatingS/updateRating/{ratingId}": {
        "put": {
          "tags": [
            "Ratings"
          ],
          "summary": "Update a rating",
          "description": "Allows the customer who created a rating to update it.",
          "parameters": [
            {
              "name": "ratingId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rating ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRatingRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Rating updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RatingResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Not allowed"
            },
            "404": {
              "description": "Rating not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
       "/RatingS/deleteRating/{ratingId}": {
  "delete": {
    "tags": ["Ratings"],
    "summary": "Soft delete a rating",
    "description": "Hides a rating instead of permanently deleting it (only owner or admin can perform this).",
    "parameters": [
      {
        "name": "ratingId",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "description": "Rating ID"
      },
      {
        "name": "customerId",
        "in": "query",
        "required": true,
        "schema": { "type": "string" },
        "description": "Customer ID attempting to delete the rating"
      }
    ],
    "responses": {
      "200": { "description": "Rating hidden (soft deleted) successfully" },
      "403": { "description": "Not allowed" },
      "404": { "description": "Rating not found" },
      "500": { "description": "Server error" }
    }
  }
}
,
      "/washerEmp/createWasherEmployee": {
        "post": {
          "summary": "Create a new washer employee with documents",
          "tags": [
            "WasherEmployee"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "phone": {
                      "type": "string",
                      "example": "9876543210"
                    },
                    "email": {
                      "type": "string",
                      "example": "john@example.com"
                    },
                    "password": {
                      "type": "string",
                      "example": "password123"
                    },
                    "dateOfBirth": {
                      "type": "string",
                      "format": "date",
                      "example": "1990-05-15"
                    },
                    "gender": {
                      "type": "string",
                      "enum": [
                        "Male",
                        "Female",
                        "Other"
                      ],
                      "example": "Male"
                    },
                    "referralCode": {
                      "type": "string",
                      "example": "REF1234"
                    },
                    "serviceCategories": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Washing",
                        "Repair"
                      ]
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "Washing Personnel",
                        "Delivery Person",
                        "Repair Service Technician",
                        "Product Seller"
                      ],
                      "example": "Washing Personnel"
                    },
                    "street": {
                      "type": "string",
                      "example": "123 Anna Street"
                    },
                    "city": {
                      "type": "string",
                      "example": "Chennai"
                    },
                    "state": {
                      "type": "string",
                      "example": "Tamil Nadu"
                    },
                    "postalCode": {
                      "type": "string",
                      "example": "600040"
                    },
                    "country": {
                      "type": "string",
                      "example": "India"
                    },
                    "longitude": {
                      "type": "number",
                      "example": 80.2707
                    },
                    "latitude": {
                      "type": "number",
                      "example": 13.0827
                    },
                    "emergencyName": {
                      "type": "string",
                      "example": "Jane Doe"
                    },
                    "emergencyPhone": {
                      "type": "string",
                      "example": "9876543211"
                    },
                    "vehicleType": {
                      "type": "string",
                      "example": "Bike"
                    },
                    "vehicleModel": {
                      "type": "string",
                      "example": "Honda Activa"
                    },
                    "licensePlate": {
                      "type": "string",
                      "example": "TN01AB1234"
                    },
                    "registrationCertificate": {
                      "type": "string",
                      "format": "binary",
                      "description": "Upload RC document"
                    },
                    "drivingLicense": {
                      "type": "string",
                      "format": "binary",
                      "description": "Upload DL document"
                    },
                    "aadhaarCard": {
                      "type": "string",
                      "format": "binary",
                      "description": "Upload Aadhaar card"
                    },
                    "accountHolderName": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "accountNumber": {
                      "type": "string",
                      "example": "1234567890"
                    },
                    "ifscCode": {
                      "type": "string",
                      "example": "SBIN0001234"
                    },
                    "termsAccepted": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "required": [
                    "fullName",
                    "phone",
                    "email",
                    "password",
                    "dateOfBirth",
                    "gender",
                    "role",
                    "street",
                    "emergencyName",
                    "emergencyPhone"
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Washer employee created successfully"
            },
            "400": {
              "description": "Validation error"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmp/getAllWasherEmployees": {
        "get": {
          "summary": "Get all washer employees",
          "tags": [
            "WasherEmployee"
          ],
          "responses": {
            "200": {
              "description": "Fetched all washer employees"
            },
            "404": {
              "description": "No washer employees found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmp/getWasherEmployeeById/{id}": {
        "get": {
          "summary": "Get a washer employee by ID",
          "tags": [
            "WasherEmployee"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "responses": {
            "200": {
              "description": "Washer employee fetched successfully"
            },
            "404": {
              "description": "Washer employee not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmp/updateWasherEmployee/{id}": {
        "put": {
          "summary": "Update a washer employee by ID with documents",
          "tags": [
            "WasherEmployee"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string",
                      "format": "date"
                    },
                    "gender": {
                      "type": "string"
                    },
                    "referralCode": {
                      "type": "string"
                    },
                    "serviceCategories": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "role": {
                      "type": "string"
                    },
                    "street": {
                      "type": "string"
                    },
                    "city": {
                      "type": "string"
                    },
                    "state": {
                      "type": "string"
                    },
                    "postalCode": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string"
                    },
                    "longitude": {
                      "type": "number"
                    },
                    "latitude": {
                      "type": "number"
                    },
                    "emergencyName": {
                      "type": "string"
                    },
                    "emergencyPhone": {
                      "type": "string"
                    },
                    "vehicleType": {
                      "type": "string"
                    },
                    "vehicleModel": {
                      "type": "string"
                    },
                    "licensePlate": {
                      "type": "string"
                    },
                    "registrationCertificate": {
                      "type": "string",
                      "format": "binary"
                    },
                    "drivingLicense": {
                      "type": "string",
                      "format": "binary"
                    },
                    "aadhaarCard": {
                      "type": "string",
                      "format": "binary"
                    },
                    "accountHolderName": {
                      "type": "string"
                    },
                    "accountNumber": {
                      "type": "string"
                    },
                    "ifscCode": {
                      "type": "string"
                    },
                    "termsAccepted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Washer employee updated successfully"
            },
            "404": {
              "description": "Employee not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmp/deleteWasherEmployee/{id}": {
        "delete": {
          "summary": "Delete a washer employee by ID",
          "tags": [
            "WasherEmployee"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "6710d4f1b3a9a0a6a6b8e125"
            }
          ],
          "responses": {
            "200": {
              "description": "Washer employee deleted successfully"
            },
            "404": {
              "description": "Washer employee not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/washerAcceptBooking": {
        "post": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Accept a wash booking",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeclineBooking"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking accepted successfully"
            },
            "400": {
              "description": "Invalid ID"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/washerDeclineBooking": {
        "post": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Decline a wash booking",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeclineBooking"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking declined successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/updateBookingStatus/{scheduleId}": {
        "put": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Update booking status",
          "parameters": [
            {
              "name": "scheduleId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "On the Way",
                        "Started",
                        "Completed",
                        "Declined"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Status updated successfully"
            },
            "400": {
              "description": "Invalid scheduleId"
            },
            "404": {
              "description": "Schedule not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/getAllWasherSchedules": {
        "get": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Get all schedules or schedules for a specific washer",
          "parameters": [
            {
              "name": "washerId",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              },
              "description": "Optional washer ID to filter schedules"
            }
          ],
          "responses": {
            "200": {
              "description": "Schedules fetched successfully"
            },
            "404": {
              "description": "No schedules found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/washerEmpShedule/deleteSchedule/{scheduleId}": {
        "delete": {
          "tags": [
            "WasherEmpSchedule"
          ],
          "summary": "Delete a schedule",
          "parameters": [
            {
              "name": "scheduleId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Schedule deleted successfully"
            },
            "404": {
              "description": "Schedule not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/acceptOrder": {
        "post": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Accept a delivery order",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeclineOrder"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order accepted successfully"
            },
            "400": {
              "description": "Invalid ID or employee not a Delivery Person"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/declineOrder": {
        "post": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Decline a delivery order",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeclineOrder"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order declined successfully"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/updateOrderStatus/{scheduleId}": {
        "put": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Update order status",
          "parameters": [
            {
              "name": "scheduleId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "On the Way",
                        "Picked Up",
                        "Completed",
                        "Cancelled"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Status updated successfully"
            },
            "400": {
              "description": "Invalid scheduleId"
            },
            "404": {
              "description": "Schedule not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/getAllSchedules": {
        "get": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Get all schedules or schedules for a specific delivery person",
          "parameters": [
            {
              "name": "deliveryPersonId",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              },
              "description": "Optional delivery person ID to filter schedules"
            }
          ],
          "responses": {
            "200": {
              "description": "Schedules fetched successfully"
            },
            "404": {
              "description": "No schedules found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/DeliveryPerson/deleteSchedule/{scheduleId}": {
        "delete": {
          "tags": [
            "DeliveryPersonSchedule"
          ],
          "summary": "Delete a delivery schedule",
          "parameters": [
            {
              "name": "scheduleId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Schedule deleted successfully"
            },
            "404": {
              "description": "Schedule not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "CustomerRegister": {
          "type": "object",
          "properties": {
            "fullName": {
              "type": "string",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "example": "john@example.com"
            },
            "phoneNumber": {
              "type": "string",
              "example": "9876543210"
            },
            "password": {
              "type": "string",
              "example": "123456"
            },
            "confirmPassword": {
              "type": "string",
              "example": "123456"
            }
          },
          "required": [
            "fullName",
            "email",
            "phoneNumber",
            "password",
            "confirmPassword"
          ]
        },
        "CustomerLogin": {
          "type": "object",
          "properties": {
            "emailOrPhone": {
              "type": "string",
              "example": "john@example.com"
            },
            "password": {
              "type": "string",
              "example": "123456"
            }
          },
          "required": [
            "emailOrPhone",
            "password"
          ]
        },
        "CustomerUpdate": {
          "type": "object",
          "properties": {
            "fullName": {
              "type": "string",
              "example": "John Doe Updated"
            },
            "email": {
              "type": "string",
              "example": "johnnew@example.com"
            },
            "phoneNumber": {
              "type": "string",
              "example": "9876543210"
            },
            "street": {
              "type": "string",
              "example": "123 Main Street"
            },
            "city": {
              "type": "string",
              "example": "New York"
            },
            "pincode": {
              "type": "string",
              "example": "10001"
            },
            "maxCars": {
              "type": "number",
              "example": 2
            },
            "location": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "Point"
                  ],
                  "example": "Point"
                },
                "coordinates": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    -73.935242,
                    40.73061
                  ]
                }
              }
            }
          }
        },
        "Banner": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "example": "Car Wash"
            },
            "description": {
              "type": "string",
              "example": "Premium car washing service at your doorstep."
            },
            "priceTag": {
              "type": "number",
              "example": 10
            },
            "image": {
              "type": "string",
              "format": "binary",
              "description": "Upload banner image file"
            }
          },
          "required": [
            "title",
            "description",
            "priceTag",
            "image"
          ]
        },
        "WashService": {
          "type": "object",
          "properties": {
            "packageName": {
              "type": "string",
              "example": "Basic Wash"
            },
            "price": {
              "type": "number",
              "example": 15
            },
            "description": {
              "type": "string",
              "example": "Basic car wash including exterior cleaning"
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "Exterior cleaning",
                "Tire wash",
                "Window cleaning"
              ]
            }
          },
          "required": [
            "packageName",
            "price",
            "description"
          ]
        },
        "WashBooking": {
          "type": "object",
          "properties": {
            "customerId": {
              "type": "string",
              "example": "68e9eb5372ffcf9a50ca0d03"
            },
            "vehicleType": {
              "type": "string",
              "enum": [
                "Car",
                "Bike"
              ],
              "example": "Car"
            },
            "vehicleNumber": {
              "type": "string",
              "example": "TN01AB1234"
            },
            "washPackage": {
              "type": "object",
              "properties": {
                "packageName": {
                  "type": "string",
                  "example": "Standard Wash"
                },
                "price": {
                  "type": "number",
                  "example": 30
                },
                "description": {
                  "type": "string",
                  "example": "Complete car wash including exterior and interior cleaning"
                },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Exterior Cleaning",
                    "Tire Wash",
                    "Vacuuming"
                  ]
                }
              },
              "required": [
                "packageName",
                "price",
                "description"
              ]
            },
            "serviceType": {
              "type": "string",
              "enum": [
                "Normal",
                "Express"
              ],
              "example": "Express"
            },
            "address": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "example": "12 Gandhi Street"
                },
                "city": {
                  "type": "string",
                  "example": "Chennai"
                },
                "pincode": {
                  "type": "string",
                  "example": "600001"
                }
              },
              "required": [
                "street",
                "city",
                "pincode"
              ]
            },
            "bookingDate": {
              "type": "string",
              "format": "date",
              "example": "2025-06-10"
            },
            "bookingTime": {
              "type": "string",
              "example": "09:00 AM"
            },
            "expressCharge": {
              "type": "number",
              "example": 10
            },
            "advanceBookingCharge": {
              "type": "number",
              "example": 10
            },
            "discountAmount": {
              "type": "number",
              "example": 5
            },
            "couponCode": {
              "type": "string",
              "example": "SAVE5"
            },
            "totalAmount": {
              "type": "number",
              "example": 45
            },
            "paymentMethod": {
              "type": "string",
              "enum": [
                "Cash",
                "UPI",
                "Card"
              ],
              "example": "UPI"
            },
            "paymentStatus": {
              "type": "string",
              "enum": [
                "Pending",
                "Completed",
                "Paid"
              ],
              "example": "Paid"
            }
          },
          "required": [
            "customerId",
            "vehicleType",
            "vehicleNumber",
            "washPackage",
            "serviceType",
            "address",
            "bookingDate",
            "bookingTime",
            "paymentMethod",
            "totalAmount"
          ]
        },
        "WashBookingUpdate": {
          "type": "object",
          "properties": {
            "washPackage": {
              "type": "string",
              "example": "Deluxe"
            },
            "serviceType": {
              "type": "string",
              "example": "Express"
            },
            "expressCharge": {
              "type": "number",
              "example": 10
            },
            "advanceBookingCharge": {
              "type": "number",
              "example": 10
            },
            "couponCode": {
              "type": "string",
              "example": "WELCOME50"
            },
            "discountAmount": {
              "type": "number",
              "example": 5
            },
            "totalAmount": {
              "type": "number",
              "example": 45
            },
            "paymentStatus": {
              "type": "string",
              "example": "Completed"
            }
          }
        },
        "WashBookingCancel": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "example": "Customer changed the schedule"
            }
          },
          "required": []
        },
        "AddProductRequest": {
          "type": "object",
          "required": [
            "customerId",
            "productId",
            "productName",
            "price",
            "quantity"
          ],
          "properties": {
            "customerId": {
              "type": "string"
            },
            "productId": {
              "type": "string"
            },
            "productName": {
              "type": "string"
            },
            "productDescription": {
              "type": "string"
            },
            "quantity": {
              "type": "integer",
              "default": 1
            },
            "price": {
              "type": "number"
            }
          }
        },
        "AddServiceRequest": {
          "type": "object",
          "required": [
            "customerId",
            "serviceItems"
          ],
          "properties": {
            "customerId": {
              "type": "string"
            },
            "serviceItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "serviceId": {
                    "type": "string"
                  },
                  "productImage": {
                    "type": "string"
                  },
                  "productName": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "serviceCharges": {
                    "type": "number"
                  },
                  "serviceStore": {
                    "type": "object",
                    "properties": {
                      "storeName": {
                        "type": "string"
                      },
                      "storeAddress": {
                        "type": "string"
                      },
                      "contactNumber": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "RemoveItemRequest": {
          "type": "object",
          "required": [
            "customerId",
            "itemId",
            "type"
          ],
          "properties": {
            "customerId": {
              "type": "string"
            },
            "itemId": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "product",
                "service"
              ]
            }
          }
        },
        "CartItem": {
          "type": "object",
          "properties": {
            "productId": {
              "type": "string"
            },
            "productName": {
              "type": "string"
            },
            "productDescription": {
              "type": "string"
            },
            "quantity": {
              "type": "integer"
            },
            "price": {
              "type": "number"
            },
            "total": {
              "type": "number"
            },
            "serviceItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "serviceId": {
                    "type": "string"
                  },
                  "productImage": {
                    "type": "string"
                  },
                  "productName": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "serviceCharges": {
                    "type": "number"
                  },
                  "serviceStore": {
                    "type": "object",
                    "properties": {
                      "storeName": {
                        "type": "string"
                      },
                      "storeAddress": {
                        "type": "string"
                      },
                      "contactNumber": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "CartResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "customerId": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "subtotal": {
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "CartListResponse": {
          "type": "object",
          "properties": {
            "carts": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CartResponse"
              }
            }
          }
        },
        "Order": {
          "type": "object",
          "properties": {
            "customerId": {
              "type": "string",
              "example": "68e9eb5372ffcf9a50ca0d03"
            },
            "cartItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "payment": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "required": [
            "customerId",
            "cartItems",
            "address",
            "payment"
          ]
        },
        "CartItem": {
          "type": "object",
          "properties": {
            "productId": {
              "type": "string",
              "example": "652a1f3e2b9871dabc123456"
            },
            "productName": {
              "type": "string",
              "example": "Car Wax"
            },
            "productDescription": {
              "type": "string",
              "example": "High-quality car wax that provides long-lasting shine and protection"
            },
            "quantity": {
              "type": "integer",
              "example": 2
            },
            "price": {
              "type": "number",
              "example": 500
            },
            "total": {
              "type": "number",
              "example": 1000
            }
          }
        },
        "Address": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "12 Gandhi Street"
            },
            "city": {
              "type": "string",
              "example": "Chennai"
            },
            "pincode": {
              "type": "string",
              "example": "600001"
            },
            "maxCars": {
              "type": "integer",
              "example": 1
            },
            "location": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "Point"
                },
                "coordinates": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    80.2707,
                    13.0827
                  ]
                }
              }
            }
          }
        },
        "Payment": {
          "type": "object",
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "COD",
                "CreditCard",
                "DebitCard",
                "UPI",
                "NetBanking"
              ],
              "example": "UPI"
            },
            "transactionId": {
              "type": "string",
              "example": "TXN123456"
            },
            "amount": {
              "type": "number",
              "example": 1000
            },
            "status": {
              "type": "string",
              "enum": [
                "Pending",
                "Completed",
                "Failed"
              ],
              "example": "Pending"
            }
          }
        },
        "OrderUpdate": {
          "type": "object",
          "properties": {
            "cartItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "payment": {
              "$ref": "#/components/schemas/Payment"
            },
            "orderStatus": {
              "type": "string",
              "enum": [
                "Processing",
                "Shipped",
                "Delivered",
                "Cancelled"
              ],
              "example": "Processing"
            }
          }
        },
        "OrderCancel": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "example": "Customer requested cancellation due to change in schedule"
            },
            "orderStatus": {
              "type": "string",
              "enum": [
                "Cancelled"
              ],
              "example": "Cancelled"
            },
            "cancelledAt": {
              "type": "string",
              "format": "date-time",
              "example": "2025-10-15T09:30:00.000Z"
            }
          },
          "required": [
            "reason"
          ]
        },
        "ServiceBooking": {
          "type": "object",
          "properties": {
            "customerId": {
              "type": "string",
              "example": "6710d40ef8c1f9a4a5b6c123"
            },
            "serviceItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "serviceId": {
                    "type": "string",
                    "example": "6710d4f1b3a9a0a6a6b8e124"
                  },
                  "productImage": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                  },
                  "productName": {
                    "type": "string",
                    "example": "AC Cleaning"
                  },
                  "description": {
                    "type": "string",
                    "example": "Full AC cleaning and service"
                  },
                  "serviceCharges": {
                    "type": "number",
                    "example": 600
                  },
                  "serviceStore": {
                    "type": "object",
                    "properties": {
                      "storeName": {
                        "type": "string",
                        "example": "CoolCare Services"
                      },
                      "storeAddress": {
                        "type": "string",
                        "example": "123 Anna Nagar, Chennai"
                      },
                      "contactNumber": {
                        "type": "string",
                        "example": "9876543210"
                      }
                    }
                  }
                }
              }
            },
            "address": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "example": "No.10, Gandhi Street"
                },
                "city": {
                  "type": "string",
                  "example": "Chennai"
                },
                "pincode": {
                  "type": "string",
                  "example": "600040"
                },
                "location": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "Point"
                    },
                    "coordinates": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "example": [
                        80.2707,
                        13.0827
                      ]
                    }
                  }
                }
              }
            },
            "date": {
              "type": "string",
              "format": "date",
              "example": "2025-10-12"
            },
            "time": {
              "type": "string",
              "example": "14:30"
            },
            "payment": {
              "type": "object",
              "properties": {
                "method": {
                  "type": "string",
                  "example": "Online"
                },
                "transactionId": {
                  "type": "string",
                  "example": "TXN12345ABC"
                },
                "amount": {
                  "type": "number",
                  "example": 600
                },
                "status": {
                  "type": "string",
                  "example": "Pending"
                }
              }
            }
          },
          "required": [
            "customerId",
            "serviceItems",
            "address",
            "date",
            "time",
            "payment"
          ]
        },
        "ServiceBookingCancel": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "example": "Customer requested cancellation due to change in schedule"
            }
          },
          "required": [
            "reason"
          ]
        },
        "ServiceBookingUpdate": {
          "type": "object",
          "properties": {
            "serviceStatus": {
              "type": "string",
              "example": "Processing"
            },
            "payment": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Completed"
                },
                "transactionId": {
                  "type": "string",
                  "example": "TXN12345ABC"
                }
              }
            }
          }
        },
        "AddressCreate": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "123 Main Street"
            },
            "city": {
              "type": "string",
              "example": "New York"
            },
            "pincode": {
              "type": "string",
              "example": "10001"
            },
            "maxCars": {
              "type": "integer",
              "example": 2
            },
            "location": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "Point"
                },
                "coordinates": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    -73.935242,
                    40.73061
                  ]
                }
              }
            }
          },
          "required": [
            "street",
            "city",
            "pincode",
            "location"
          ]
        },
        "AddressUpdate": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "123 Main Street Updated"
            },
            "city": {
              "type": "string",
              "example": "New York Updated"
            },
            "pincode": {
              "type": "string",
              "example": "10001"
            },
            "maxCars": {
              "type": "integer",
              "example": 3
            },
            "location": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "Point"
                },
                "coordinates": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    -73.935242,
                    40.73061
                  ]
                }
              }
            }
          }
        },
        "CreateRatingRequest": {
          "type": "object",
          "properties": {
            "employeeId": {
              "type": "string",
              "example": "652ab0f3e3d1a912f0ab1234"
            },
            "customerId": {
              "type": "string",
              "example": "652ab0f3e3d1a912f0cd5678"
            },
            "score": {
              "type": "number",
              "example": 4.5
            },
            "comment": {
              "type": "string",
              "example": "Excellent washing service!"
            },
            "serviceBookingId": {
              "type": "string",
              "example": "652ab0f3e3d1a912f0aa7890"
            }
          },
          "required": [
            "employeeId",
            "score"
          ]
        },
        "UpdateRatingRequest": {
          "type": "object",
          "properties": {
            "score": {
              "type": "number",
              "example": 5
            },
            "comment": {
              "type": "string",
              "example": "Updated: very satisfied!"
            }
          }
        },
        "RatingResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "customerId": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            },
            "employeeId": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "fullName": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                }
              }
            },
            "score": {
              "type": "number",
              "format": "float"
            },
            "comment": {
              "type": "string"
            },
            "serviceBookingId": {
              "type": "string"
            },
            "isDeleted": {
              "type": "boolean",
              "example": false
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "Rating": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "score": {
              "type": "number",
              "format": "float"
            },
            "comment": {
              "type": "string"
            },
            "employeeId": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "fullName": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                }
              }
            },
            "serviceBookingId": {
              "type": "string"
            },
            "isDeleted": {
              "type": "boolean",
              "example": false
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "EmployeeSummary": {
          "type": "object",
          "properties": {
            "employee": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "avgRating": {
                  "type": "number",
                  "example": 4.2
                },
                "ratingCount": {
                  "type": "integer",
                  "example": 25
                }
              }
            }
          }
        },
        "WasherEmployee": {
          "type": "object",
          "properties": {
            "fullName": {
              "type": "string",
              "example": "John Doe"
            },
            "phone": {
              "type": "string",
              "example": "9876543210"
            },
            "email": {
              "type": "string",
              "example": "john@example.com"
            },
            "password": {
              "type": "string",
              "example": "password123"
            },
            "dateOfBirth": {
              "type": "string",
              "format": "date",
              "example": "1990-05-15"
            },
            "gender": {
              "type": "string",
              "enum": [
                "Male",
                "Female",
                "Other"
              ],
              "example": "Male"
            },
            "referralCode": {
              "type": "string",
              "example": "REF1234"
            },
            "serviceCategories": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "Washing",
                "Repair"
              ]
            },
            "role": {
              "type": "string",
              "enum": [
                "Washing Personnel",
                "Delivery Person",
                "Repair Service Technician",
                "Product Seller"
              ],
              "example": "Washing Personnel"
            },
            "street": {
              "type": "string",
              "example": "123 Anna Street"
            },
            "city": {
              "type": "string",
              "example": "Chennai"
            },
            "state": {
              "type": "string",
              "example": "Tamil Nadu"
            },
            "postalCode": {
              "type": "string",
              "example": "600040"
            },
            "country": {
              "type": "string",
              "example": "India"
            },
            "longitude": {
              "type": "number",
              "example": 80.2707
            },
            "latitude": {
              "type": "number",
              "example": 13.0827
            },
            "emergencyName": {
              "type": "string",
              "example": "Jane Doe"
            },
            "emergencyPhone": {
              "type": "string",
              "example": "9876543211"
            },
            "vehicleType": {
              "type": "string",
              "example": "Bike"
            },
            "vehicleModel": {
              "type": "string",
              "example": "Honda Activa"
            },
            "licensePlate": {
              "type": "string",
              "example": "TN01AB1234"
            },
            "registrationCertificate": {
              "type": "string",
              "format": "binary",
              "description": "Upload RC document"
            },
            "drivingLicense": {
              "type": "string",
              "format": "binary",
              "description": "Upload DL document"
            },
            "accountHolderName": {
              "type": "string",
              "example": "John Doe"
            },
            "accountNumber": {
              "type": "string",
              "example": "1234567890"
            },
            "ifscCode": {
              "type": "string",
              "example": "SBIN0001234"
            },
            "aadhaarCard": {
              "type": "string",
              "format": "binary",
              "description": "Upload Aadhaar card"
            },
            "termsAccepted": {
              "type": "boolean",
              "example": true
            },
            "avgRating": {
              "type": "number",
              "example": 4.2
            },
            "ratingCount": {
              "type": "integer",
              "example": 25
            }
          },
          "required": [
            "fullName",
            "phone",
            "email",
            "password",
            "dateOfBirth",
            "gender",
            "role",
            "street",
            "emergencyName",
            "emergencyPhone"
          ]
        },
        "AcceptDeclineBooking": {
          "type": "object",
          "properties": {
            "bookingId": {
              "type": "string",
              "example": "6710d4f1b3a9a0a6a6b8e125"
            },
            "washerId": {
              "type": "string",
              "example": "6710d4f1b3a9a0a6a6b8e999"
            }
          },
          "required": [
            "bookingId",
            "washerId"
          ]
        },
        "WasherEmpSchedule": {
          "type": "object",
          "properties": {
            "washerEmployeeId": {
              "type": "string"
            },
            "bookingId": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "On the Way",
                "Started",
                "Completed",
                "Declined"
              ]
            },
            "bookingSummary": {
              "type": "object",
              "properties": {
                "vehicleType": {
                  "type": "string",
                  "example": "Car"
                },
                "packageName": {
                  "type": "string",
                  "example": "Standard Wash"
                },
                "serviceType": {
                  "type": "string",
                  "example": "Express"
                },
                "date": {
                  "type": "string",
                  "example": "2025-06-10"
                },
                "time": {
                  "type": "string",
                  "example": "09:00 AM"
                },
                "expressCharge": {
                  "type": "number",
                  "example": 10
                },
                "advanceBookingCharge": {
                  "type": "number",
                  "example": 10
                },
                "discountAmount": {
                  "type": "number",
                  "example": 5
                },
                "couponCode": {
                  "type": "string",
                  "example": "SAVE5"
                },
                "basePrice": {
                  "type": "number",
                  "example": 30
                },
                "totalAmount": {
                  "type": "number",
                  "example": 45
                }
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "AcceptDeclineOrder": {
          "type": "object",
          "properties": {
            "customerShoppingId": {
              "type": "string",
              "example": "652a1f3e2b9871dabc123456"
            },
            "deliveryPersonId": {
              "type": "string",
              "example": "652a1f3e2b9871dabc654321"
            }
          },
          "required": [
            "customerShoppingId",
            "deliveryPersonId"
          ]
        },
        "DeliveryPersonSchedule": {
          "type": "object",
          "properties": {
            "deliveryPersonId": {
              "type": "string"
            },
            "customerShoppingId": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "On the Way",
                "Picked Up",
                "Completed",
                "Cancelled"
              ]
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            },
            "orderSummary": {
              "type": "object",
              "properties": {
                "cartTotal": {
                  "type": "number"
                },
                "paymentAmount": {
                  "type": "number"
                },
                "orderStatus": {
                  "type": "string"
                },
                "address": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "tags": [
      {
        "name": "Customer",
        "description": "Manage customer accounts"
      },
      {
        "name": "CustomerBanner",
        "description": "Manage banners for customers"
      },
      {
        "name": "ServiceType",
        "description": "Manage Wash Service Types"
      },
      {
        "name": "Wash Booking",
        "description": "Manage car wash bookings"
      },
      {
        "name": "Cart",
        "description": "Operations related to cart management"
      },
      {
        "name": "CustomerShopping",
        "description": "Manage customer shopping orders"
      },
      {
        "name": "ServiceBooking",
        "description": "Manage customer service booking orders"
      },
      {
        "name": "Address",
        "description": "APIs related to customer addresses"
      },
      {
        "name": "Ratings",
        "description": "Endpoints related to customer ratings for service employees"
      },
      {
        "name": "WasherEmployee",
        "description": "Manage WasherEmployee Registration"
      },
      {
        "name": "WasherEmpSchedule",
        "description": "Endpoints for managing washer employee schedules"
      },
      {
        "name": "DeliveryPersonSchedule",
        "description": "Operations related to delivery person schedules"
      }
    ]
  }